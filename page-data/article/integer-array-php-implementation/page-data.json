{
    "componentChunkName": "component---src-templates-article-template-tsx",
    "path": "/article/integer-array-php-implementation/",
    "result": {"data":{"mdx":{"id":"775deab9-b731-56b3-89c2-1f8792745ab2","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"php 로 IntegerArray 구현하기\",\n  \"date\": \"2019-11-27T14:52:00.000Z\",\n  \"summary\": \"기본적으로 PHP 의 배열은 일반적인 ArrayList 구현이 아니라, Hash Table 입니다. 그러다보니 php 개발자들은 배열을 배열처럼 쓰지 않고 Hash Table 처럼 이용하는 분들이 많습니다. (나쁜거 아니에요!)\",\n  \"category\": \"coding\",\n  \"image\": \"https://raw.githubusercontent.com/security-checklist/php-security-check-list/master//image/php-image.png\",\n  \"tags\": [\"dev\", \"coding\", \"php\", \"iterator\", \"array\", \"integer\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\uAE30\\uBCF8\\uC801\\uC73C\\uB85C PHP \\uC758 \\uBC30\\uC5F4\\uC740 \\uC77C\\uBC18\\uC801\\uC778 ArrayList \\uAD6C\\uD604\\uC774 \\uC544\\uB2C8\\uB77C, Hash Table \\uC785\\uB2C8\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uADF8\\uB7EC\\uB2E4\\uBCF4\\uB2C8 php \\uAC1C\\uBC1C\\uC790\\uB4E4\\uC740 \\uBC30\\uC5F4\\uC744 \\uBC30\\uC5F4\\uCC98\\uB7FC \\uC4F0\\uC9C0 \\uC54A\\uACE0 Hash Table \\uCC98\\uB7FC \\uC774\\uC6A9\\uD558\\uB294 \\uBD84\\uB4E4\\uC774 \\uB9CE\\uC2B5\\uB2C8\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"(\\uB098\\uC05C\\uAC70 \\uC544\\uB2C8\\uC5D0\\uC694!)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"$a = ['q_lazzarus' => '\\uD0B9\\uC655\\uC9F1'];\\necho $a['q_lazzarus'];\\n\")), mdx(\"p\", null, \"\\uB2E4\\uC2DC \\uAE30\\uCD08\\uB85C \\uB3CC\\uC544\\uAC00\\uC790\\uBA74, array \\uB294 \\uB3D9\\uC77C\\uD55C \\uC790\\uB8CC\\uAD6C\\uC870\\uC758 \\uBC18\\uBCF5 \\uC785\\uB2C8\\uB2E4.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://media.geeksforgeeks.org/wp-content/uploads/array-2.png\",\n    \"alt\": \"array data structure\"\n  })), mdx(\"p\", null, \"\\uBA54\\uBAA8\\uB9AC \\uB2E8\\uC704\\uC5D0\\uC11C \\uC0DD\\uAC01\\uD574\\uBCF4\\uBA74 \\uB3D9\\uC77C\\uD55C \\uD06C\\uAE30\\uC758 \\uBC29\\uC774 \\uC8FC\\uB8E8\\uB8E9 \\uC788\\uB294 \\uAD6C\\uC870\\uC774\\uC8E0.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://cdn.pixabay.com/photo/2016/11/06/19/57/hotel-1803960_960_720.jpg\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"!!\"), mdx(\"p\", null, \"\\uADF8\\uB807\\uB2E4\\uBA74, string \\uD558\\uB098\\uC5D0 integer \\uBAB0\\uBE75\\uD574\\uC11C \\uB123\\uC73C\\uBA74 \\uB418\\uC790\\uB108?\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://www.mememaker.net/static/images/memes/4293316.jpg\",\n    \"alt\": \"profit!!\"\n  })), mdx(\"h2\", null, \"\\uAD6C\\uD604\\uD574\\uBCF4\\uC790 !\"), mdx(\"p\", null, \"5\\uAC1C\\uC758 \\uC6D0\\uC18C\\uAC00 \\uC788\\uB294 \\uBC30\\uC5F4\\uC774 \\uC788\\uB2E4\\uACE0 \\uAC00\\uC815\\uD558\\uACE0 \\uB370\\uC774\\uD130\\uB97C \\uC77D\\uB294 \\uAC04\\uB2E8\\uD55C \\uD568\\uC218\\uB97C \\uB9CC\\uB4E4\\uC5B4 \\uBCF4\\uACA0\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"function array_get($i) {\\n    $data = '12345';\\n    return substr($data, $i, 1);\\n}\\n\\necho array_get(3);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"3\\n\")), mdx(\"p\", null, \"\\uC9DC\\uC794! \\uC774\\uB807\\uAC8C string \\uBCC0\\uC218\\uB97C \\uCC38\\uC870\\uD558\\uC5EC, \\uAC12\\uC744 \\uB9AC\\uD134\\uD558\\uB294 \\uAC04\\uB2E8\\uD55C \\uCF54\\uB4DC\\uAC00 \\uB9CC\\uB4E4\\uC5B4\\uC84C\\uC2B5\\uB2C8\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uD558\\uC9C0\\uB9CC \\uB2F9\\uC5F0\\uD558\\uAC8C\\uB3C4 \\uC774\\uAC74 \\uBABB \\uC501\\uB2C8\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC65C\\uB0D0\\uD558\\uBA74 \\uC6D0\\uC18C\\uC758 \\uB370\\uC774\\uD130\\uAC00 0~9 \\uAE4C\\uC9C0\\uB9CC \\uD5C8\\uC6A9\\uD558\\uB294 \\uB9D0\\uB3C4 \\uC548\\uB418\\uB294 \\uAD6C\\uD604\\uC774\\uAE30 \\uB54C\\uBB38\\uC785\\uB2C8\\uB2E4.\"), mdx(\"h2\", null, \"\\uC790\\uB8CC\\uD615 ??\"), mdx(\"p\", null, \"\\uAC00\\uB9CC\\uD788 \\uB2E4\\uC2DC \\uC0DD\\uAC01\\uD574 \\uBD05\\uC2DC\\uB2E4. \\uC124\\uB9C8 integer \\uB370\\uC774\\uD130\\uB97C \\uBA54\\uBAA8\\uB9AC\\uC5D0 string \\uCC98\\uB7FC \\uC800\\uC7A5\\uD558\\uC9C0 \\uC54A\\uACA0\\uC8E0...\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uBCF4\\uD1B5\\uC758 \\uACBD\\uC6B0 integer \\uC790\\uB8CC\\uD615\\uC740 4 Bytes \\uB97C \\uCC28\\uC9C0\\uD558\\uACE0 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Data Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Size (in bytes)\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Range\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"short int\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"2\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-32,768 to 32,767\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"unsigned short int\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"2\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0 to 65,535\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"unsigned int\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"4\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0 to 4,294,967,295\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"int\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"4\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-2,147,483,648 to 2,147,483,647\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"long int\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"4\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-2,147,483,648 to 2,147,483,647\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"unsigned long int\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"4\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0 to 4,294,967,295\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"long long int\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"8\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-(2^63) to (2^63)-1\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"unsigned long long int\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"8\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0 to 18,446,744,073,709,551,615\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"singed char\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-128 to 127\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"unsigned char\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0 to 255\")))), mdx(\"p\", null, \"\\uD638\\uC624 \\uADF8\\uB807\\uB2E4\\uBA74? \\uB370\\uC774\\uD130\\uB97C \\uBCC0\\uD658\\uD574\\uC11C \\uB123\\uB3C4\\uB85D \\uD558\\uACA0\\uC2B5\\uB2C8\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB2E4\\uD589\\uD788 php \\uC5D0\\uC11C\\uB294 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.php.net/manual/en/function.pack.php\"\n  }, \"pack\"), \" \\uC774\\uB77C\\uB294 \\uD568\\uC218\\uAC00 \\uC774\\uB7EC\\uD55C \\uBCC0\\uD658\\uC744 \\uD3B8\\uD558\\uAC8C \\uB3C4\\uC640\\uC90D\\uB2C8\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"$data = str_repeat(pack('I', null), 5);\\n\\nfunction array_get($i) {\\n    global $data;\\n    $binary = substr($data, $i * 4, 4);\\n    $unpack = unpack('I', $binary);\\n    return $unpack[1];\\n}\\n\\nfunction array_set($i, $value) {\\n    global $data;\\n    $binary = pack('I', $value);\\n    $data = substr_replace($data, $binary, $i * 4, 4);\\n}\\n\\narray_set(3, 65535);\\necho array_get(3);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"65535\\n\")), mdx(\"p\", null, \"\\uC624 \\uC774\\uBC88\\uC5D0\\uB294 10 \\uC744 \\uB118\\uC5B4\\uC11C \\uC2EC\\uC9C0\\uC5B4 65535 \\uB3C4 \\uC798 \\uB098\\uC624\\uACE0 \\uC788\\uC2B5\\uB2C8\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uD558\\uC9C0\\uB9CC \\uC544\\uC9C1 \\uBB38\\uC81C\\uAC00 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"echo array_get(2);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"0\\n\")), mdx(\"p\", null, \"\\uC544\\uB2C8 \\uC5B4\\uB5BB\\uAC8C \\uB41C \\uC77C\\uC774\\uC8E0?? \\uBD84\\uBA85\\uD788 \\uACF5\\uAC04\\uB9CC \\uB9CC\\uB4E4\\uC5B4\\uC8FC\\uAE30 \\uC704\\uD574\\uC11C null \\uC744 \\uB123\\uC5B4\\uC8FC\\uC5C8\\uB294\\uB370?\"), mdx(\"p\", null, \"\\uC0AC\\uC2E4\\uC740 integer \\uC790\\uB8CC\\uD615\\uC5D0\\uC11C\\uB294 null \\uC740 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC65C\\uB0D0\\uD558\\uBA74 null \\uC740 null \\uC774\\uAE30 \\uB54C\\uBB38\\uC785\\uB2C8\\uB2E4. (\\uC790\\uB8CC\\uD615\\uB3C4 \\uB2EC\\uB77C\\uC694)\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uADF8\\uB807\\uB2E4\\uBCF4\\uB2C8 \\uC800\\uD76C\\uAC00 \\uB9CC\\uB4E0 \\uD568\\uC218\\uC5D0\\uC11C\\uB294 null \\uC740 \\uCC98\\uB9AC\\uAC00 \\uBD88\\uAC00\\uB2A5 \\uD569\\uB2C8\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uADF8\\uB7FC \\uC5B4\\uB5BB\\uAC8C \\uD574\\uC57C\\uD560\\uAE4C\\uC694?\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://i.pinimg.com/236x/58/47/f7/5847f7d07e2d99eda5f80bfa36901bad--kermit-the-frog-random-stuff.jpg\",\n    \"alt\": null\n  })), mdx(\"h2\", null, \"\\uAF3C\\uC218 ??\"), mdx(\"p\", null, \"\\uC0DD\\uAC01\\uD574\\uBCF4\\uBA74 \\uB370\\uC774\\uD130\\uB97C \\uB123\\uC744\\uB54C \\uD55C\\uCE78\\uC529 \\uBBF8\\uB8E8\\uBA74 \\uB418\\uC9C0 \\uC54A\\uC744\\uAE4C\\uC694?\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"$data = str_repeat(pack('I', 0), 5);\\n\\nfunction array_get($i) {\\n    global $data;\\n    $binary = substr($data, $i * 4, 4);\\n    $unpack = unpack('I', $binary);\\n    $result = $unpack[1];\\n    if (0 === $result) {\\n        return null;\\n    }\\n    return $result - 1;\\n}\\n\\nfunction array_set($i, $value) {\\n    global $data;\\n    if (null !== $value) {\\n        $value = $value + 1;\\n    }\\n    $binary = pack('I', $value);\\n    $data = substr_replace($data, $binary, $i * 4, 4);\\n}\\n\\nvar_dump(array_get(3));\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"NULL\\n\")), mdx(\"p\", null, \"\\uC774\\uB807\\uAC8C \\uB418\\uBA74 \\uB370\\uC774\\uD130 \\uC81C\\uD55C\\uC774 4,294,967,295 \\uC5D0\\uC11C \\uD558\\uB098 \\uC18C\\uBAA8\\uAC00 \\uB418\\uC9C0\\uB9CC,\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC774 \\uC815\\uB3C4\\uBA74 \\uAD1C\\uCC2E\\uC740 \\uAC83 \\uAC19\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"h2\", null, \"\\uC2E4\\uC81C \\uBC30\\uC5F4\\uCC98\\uB7FC \\uBC14\\uAFD4 \\uBCF4\\uC544\\uC694\"), mdx(\"p\", null, \"\\uC5B4\\uB290\\uC815\\uB3C4 \\uB41C \\uAC83 \\uAC19\\uC2B5\\uB2C8\\uB2E4. \\uD558\\uC9C0\\uB9CC \\uC774\\uAC83\\uC744 \\uC2E4\\uC81C \\uBC30\\uC5F4 \\uCC98\\uB7FC \\uC4F0\\uAE30\\uC5D0\\uB294 \\uC544\\uC9C1 \\uBD80\\uC871\\uD569\\uB2C8\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uADF8\\uB798\\uC11C php \\uC5D0\\uC11C\\uB294 Array \\uAD6C\\uD604\\uD558\\uAE30 \\uC704\\uD55C \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.php.net/manual/en/class.arrayaccess.php\"\n  }, \"interface\"), \" \\uB97C \\uC81C\\uACF5\\uD569\\uB2C8\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"ArrayAccess {\\n    /* Methods */\\n    abstract public offsetExists ( mixed $offset ) : bool\\n    abstract public offsetGet ( mixed $offset ) : mixed\\n    abstract public offsetSet ( mixed $offset , mixed $value ) : void\\n    abstract public offsetUnset ( mixed $offset ) : void\\n}\\n\")), mdx(\"p\", null, \"\\uD074\\uB798\\uC2A4\\uB97C \\uB9C8\\uCE58 php \\uAE30\\uBCF8 \\uBC30\\uC5F4 \\uCC98\\uB7FC \\uC811\\uADFC \\uAC00\\uB2A5\\uD558\\uAC8C \\uD558\\uB294 \\uAD6C\\uD604\\uCCB4\\uC774\\uBA70\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC81C\\uD55C\\uC801\\uC778 \\uC758\\uBBF8\\uB85C accessor overloading \\uC785\\uB2C8\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"$obj = new obj;\\n$obj[] = 'hello';\\n$obj[] = 'world';\\n\\necho $obj[0] . ' ' . $obj[1];\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"hello world\\n\")), mdx(\"h2\", null, \"\\uC2E4\\uC81C \\uAD6C\\uD604\\uC740?\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"class FixedUnsignedIntegerArray implements Iterator, ArrayAccess, Countable\\n{\\n    const BINARY_FORMAT = 'I';\\n    private $position = 0;\\n    private $length = 0;\\n    private $binaryLength = 0;\\n    private $data = null;\\n    public function __construct($length)\\n\\n    {\\n        $null = $this->convertBinary(null);\\n        $this->position = 0;\\n        $this->length = $length;\\n        // because binary length is machine dependency\\n        $this->binaryLength = strlen($null);\\n        $this->data = str_repeat($null, $length);\\n    }\\n\\n    private function getEntry($position)\\n    {\\n        $position = $position * $this->binaryLength;\\n        $unpack = unpack(self::BINARY_FORMAT, substr($this->data, $position, $this->binaryLength));\\n        $result = false !== $unpack ? $unpack[1] : null;\\n        if (0 === $result) {\\n            return null;\\n        } else {\\n            return $result - 1;\\n        }\\n    }\\n\\n    private function setEntry($position, $value)\\n    {\\n        $position = $position * $this->binaryLength;\\n        $this->data = substr_replace($this->data, $this->convertBinary($value), $position, $this->binaryLength);\\n    }\\n\\n    private function convertBinary($value)\\n    {\\n        if (null !== $value) {\\n            $value = $value + 1;\\n        }\\n        return pack(self::BINARY_FORMAT, $value);\\n    }\\n\\n    public function rewind()\\n    {\\n        $this->position = 0;\\n    }\\n\\n    public function current()\\n    {\\n        return $this->getEntry($this->position);\\n    }\\n\\n    public function key()\\n    {\\n        return $this->position;\\n    }\\n\\n    public function next()\\n    {\\n        $this->position = $this->position + 1;\\n    }\\n\\n    public function valid()\\n    {\\n        return $this->offsetExists($this->position);\\n    }\\n\\n    public function offsetSet($offset, $value)\\n    {\\n        if (is_integer($offset) && $offset < $this->length && $offset >= 0) {\\n            $this->setEntry($offset, $value);\\n        } else {\\n            throw new InvalidArgumentException('overflow array offset');\\n        }\\n    }\\n\\n    public function offsetExists($offset)\\n    {\\n        return ($offset < $this->length && $offset >= 0);\\n    }\\n\\n    public function offsetUnset($offset)\\n    {\\n        $this->setEntry($offset, null);\\n    }\\n\\n    public function offsetGet($offset)\\n    {\\n        return $this->getEntry($offset);\\n    }\\n\\n    public function count()\\n    {\\n        return $this->length;\\n    }\\n}\\n\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.php.net/manual/en/function.pack.php\"\n  }, \"pack\"), \" \\uD568\\uC218\\uC758 \\uC124\\uBA85\\uC744 \\uB2E4\\uC2DC \\uBCF4\\uC790\\uBA74, \\uD658\\uACBD\\uC5D0 \\uB530\\uB77C \\uB2E4\\uB978 byte \\uC218\\uAC00 \\uB098\\uC62C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"unsigned integer (machine dependent size and byte order)\")), mdx(\"p\", null, \"\\uB530\\uB77C\\uC11C integer byte \\uC218\\uB97C \\uC800\\uD76C\\uAC00 \\uC54C\\uACE0 \\uC788\\uC5B4\\uC57C \\uC798\\uBABB\\uB41C \\uC8FC\\uC18C\\uB97C \\uCC38\\uC870\\uD558\\uC9C0 \\uC54A\\uB3C4\\uB85D \\uD558\\uACA0\\uC2B5\\uB2C8\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC2E4\\uC81C \\uAD6C\\uD604\\uC5D0\\uC11C\\uB294 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.php.net/manual/en/class.arrayaccess.php\"\n  }, \"Iterator\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.php.net/manual/en/class.arrayaccess.php\"\n  }, \"ArrayAccess\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.php.net/manual/en/class.countable.php\"\n  }, \"Countable\"), \" \\uC744 \\uAD6C\\uD604\\uD558\\uC5EC \\uC880 \\uB354 \\uD6A8\\uC6A9\\uC131\\uC744 \\uB192\\uC600\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"h2\", null, \"\\uC131\\uB2A5 \\uD14C\\uC2A4\\uD2B8!\"), mdx(\"p\", null, \"\\uC774\\uC81C \\uAD6C\\uD604\\uD588\\uC73C\\uB2C8, \\uC131\\uB2A5\\uC744 \\uD14C\\uC2A4\\uD2B8 \\uD574\\uBCF4\\uACA0\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"p\", null, \"\\uD14C\\uC2A4\\uD2B8\\uB294 \\uB2E4\\uC74C\\uACFC \\uAC19\\uC774 \\uC9C4\\uD589\\uD558\\uC600\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"10000 \\uD06C\\uAE30\\uC758 \\uACE0\\uC815 \\uBC30\\uC5F4\\uC744 \\uB9CC\\uB4E4\\uC5B4\\uC11C \\uB79C\\uB364\\uC73C\\uB85C \\uB370\\uC774\\uD130\\uB97C \\uB123\\uC5C8\\uC744\\uB54C \\uBA54\\uBAA8\\uB9AC \\uC0AC\\uC6A9\\uB7C9\\uC744 \\uCCB4\\uD06C \\uD558\\uC600\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"100\\uBC88\\uC529 \\uBC18\\uBCF5\\uBB38\\uC744 \\uC2E4\\uD589\\uD558\\uC5EC, \\uC2E4\\uD589 \\uC2DC\\uAC04\\uC758 \\uD3C9\\uADE0\\uC744 \\uCCB4\\uD06C \\uD558\\uC600\\uC2B5\\uB2C8\\uB2E4.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"define('ARRAY_LENGTH', 10000);\\n\\n$start_memory = memory_get_usage();\\n$vanilla = [];\\nfor ($i = 0; $i < ARRAY_LENGTH; $i++) {\\n    $vanilla[] = mt_rand(0, 255);\\n}\\n\\n$end_memory = memory_get_usage() - $start_memory;\\necho \\\"legacy array memory usage : {$end_memory}\\\\n\\\";\\n\\n$start = microtime(true);\\n$result = 0;\\nfor ($i = 0; $i < ARRAY_LENGTH; $i++) {\\n    $result += $vanilla[$i];\\n}\\n\\n$time_elapsed_secs = microtime(true) - $start;\\necho \\\"for iterator legacy array : {$time_elapsed_secs}\\\\n\\\";\\n\\n$start_memory = memory_get_usage();\\n$entries = new \\\\Monoless\\\\Arrays\\\\FixedUnsignedIntegerArray(ARRAY_LENGTH);\\nfor ($i = 0; $i < ARRAY_LENGTH; $i++) {\\n    $entries[$i] = mt_rand(0, 255);\\n}\\n\\n$end_memory = memory_get_usage() - $start_memory;\\necho \\\"fixed unsigned integer array memory usage : {$end_memory}\\\\n\\\";\\n\\n$time_total = 0;\\n$interval = 100;\\nfor ($j = 0; $j < $interval; $j++) {\\n    $start = microtime(true);\\n\\n    $result = 0;\\n    for ($i = 0; $i < ARRAY_LENGTH; $i++) {\\n        $result += $entries[$i];\\n    }\\n\\n    $time_elapsed_secs = microtime(true) - $start;\\n    $time_total += $time_elapsed_secs;\\n}\\n\\n$time_average = $time_total / $interval;\\necho \\\"iterator speed average : {$time_average}\\\\n\\\";\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"legacy array memory usage : 528440\\nfor iterator legacy array : 0.00035810470581055\\nfixed unsigned integer array memory usage : 41072\\niterator speed average : 0.0068418407440186\\n\")), mdx(\"p\", null, \"\\uBA54\\uBAA8\\uB9AC \\uC0AC\\uC6A9\\uB7C9\\uC740 \\uC57D 90% \\uAC1C\\uC120\\uC774 \\uB418\\uC5C8\\uC73C\\uB098 \\uC18D\\uB3C4\\uB294 \\uAE30\\uC874 \\uBC30\\uC5F4\\uC744 \\uC774\\uAE38 \\uC218\\uAC00 \\uC5C6\\uC5C8\\uB124\\uC694...\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://sayingimages.com/wp-content/uploads/try-again-fail-meme.png\",\n    \"alt\": \"오늘도 망했어요...\"\n  })), mdx(\"p\", null, \"\\uC5ED\\uC2DC \\uAE30\\uC874\\uAEC4 \\uC4F0\\uB294\\uAC70 \\uC88B\\uC740\\uAC70\\uB77C\\uACE0 \\uBC30\\uC6B0\\uACE0... \\uC624\\uB298\\uB3C4 \\uB9E5\\uC8FC\\uC640 \\uCE58\\uD0A8\\uC744 \\uC2DC\\uD0A4\\uBA70 \\uC7A1\\uB2C8\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uADF8\\uB798\\uB3C4 \\uC81C \\uC0BD\\uC9C8\\uC774 \\uC88B\\uB2E4\\uBA74, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/q_lazzarus/arrays\"\n  }, \"github\"), \" \\uC640 \\uC774 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://packagist.org/packages/q_lazzarus/arrays\"\n  }, \"\\uD328\\uD0A4\\uC9C0\"), \"\\uB97C \\uCC38\\uACE0\\uD558\\uC138\\uC694\"), mdx(\"h2\", null, \"\\uD6C4\\uC77C\\uB2F4...\"), mdx(\"p\", null, \"\\uD639\\uC2DC\\uB098 \\uC2F6\\uC5B4\\uC11C php://memory \\uC5D0 fwrite / fseek \\uB97C \\uAD6C\\uD604\\uD574\\uBD24\\uB294\\uB370 \\uB354 \\uB290\\uB838\\uC2B5\\uB2C8\\uB2E4...\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"for iterator legacy array : 0.0013089179992676\\nstring speed average : 0.0084279131889343\\nphp://memory speed average : 0.0098107981681824\\n\")), mdx(\"h3\", null, \"\\uCC38\\uC870 \\uC0AC\\uC774\\uD2B8\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.php.net/manual/en/language.types.array.php\"\n  }, \"https://www.php.net/manual/en/language.types.array.php\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.geeksforgeeks.org/array-data-structure/\"\n  }, \"https://www.geeksforgeeks.org/array-data-structure/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.geeksforgeeks.org/c-data-types/\"\n  }, \"https://www.geeksforgeeks.org/c-data-types/\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"php 로 IntegerArray 구현하기","date":"2019-11-27T14:52:00.000Z","image":"https://raw.githubusercontent.com/security-checklist/php-security-check-list/master//image/php-image.png","category":"coding","tags":["dev","coding","php","iterator","array","integer"],"summary":"기본적으로 PHP 의 배열은 일반적인 ArrayList 구현이 아니라, Hash Table 입니다. 그러다보니 php 개발자들은 배열을 배열처럼 쓰지 않고 Hash Table 처럼 이용하는 분들이 많습니다. (나쁜거 아니에요!)"}}},"pageContext":{"id":"775deab9-b731-56b3-89c2-1f8792745ab2","next":{"id":"4bdc17e1-73d8-5a63-b273-fa34441db149","frontmatter":{"title":"mobx를 이용한 flutter 상태 관리","date":"2019-09-04T15:00:00.000Z","category":"coding","image":"https://vuex.vuejs.org/flow.png","tags":["dev","coding","flutter","dart","mobx","state","reactive","android","ios","iphone","google","hybrid"]},"slug":"flutter-with-mobx"},"previous":{"id":"e75b7c03-fc05-520e-8092-42a54b998ff3","frontmatter":{"title":"babel 이란 무엇인가?","date":"2020-02-12T12:56:00.000Z","category":"coding","image":"https://blog.kakaocdn.net/dn/dGyesV/btqE0BOfEnV/tFNI9i4mUKj4xQkhrnDFI1/img.png","tags":["dev","coding","javascript","webpack","babel","polyfill","esnext","typescript"]},"slug":"what-is-babel"}}},
    "staticQueryHashes": ["3764592887"]}