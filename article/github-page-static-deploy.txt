1:"$Sreact.fragment"
3:I[5244,[],""]
4:I[3866,[],""]
6:I[6213,[],"OutletBoundary"]
8:I[6213,[],"MetadataBoundary"]
a:I[6213,[],"ViewportBoundary"]
c:I[4835,[],""]
:HL["/_next/static/media/47cbc4e2adbc5db9-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/acfb4e572a721580.css","style"]
0:{"P":null,"b":"RgLcQ5Ceq5qNrQhzygPLs","p":"","c":["","article","github-page-static-deploy"],"i":false,"f":[[["",{"children":["article",{"children":[["slug","github-page-static-deploy","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/acfb4e572a721580.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],"$L2"]}],{"children":["article",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","github-page-static-deploy","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":"$L7"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","6AkwIwN1qpjx-6LpTnj3a",{"children":[["$","$L8",null,{"children":"$L9"}],["$","$La",null,{"children":"$Lb"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
d:I[6269,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"default"]
e:I[4527,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"default"]
f:I[1392,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"default"]
10:I[457,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"default"]
11:I[766,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"GoogleAnalytics"]
2:["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":["$","body",null,{"children":[[["$","script","mui-color-scheme-init",{"suppressHydrationWarning":true,"nonce":"$undefined","dangerouslySetInnerHTML":{"__html":"(function() {\ntry {\n  let colorScheme = '';\n  const mode = localStorage.getItem('mui-mode') || 'system';\n  const dark = localStorage.getItem('mui-color-scheme-dark') || 'dark';\n  const light = localStorage.getItem('mui-color-scheme-light') || 'light';\n  if (mode === 'system') {\n    // handle system mode\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      colorScheme = dark\n    } else {\n      colorScheme = light\n    }\n  }\n  if (mode === 'light') {\n    colorScheme = light;\n  }\n  if (mode === 'dark') {\n    colorScheme = dark;\n  }\n  if (colorScheme) {\n    document.documentElement.classList.remove('%s'.replace('%s', light), '%s'.replace('%s', dark));\n      document.documentElement.classList.add('%s'.replace('%s', colorScheme));document.documentElement.setAttribute('.%s', colorScheme);\n  }\n} catch(e){}})();"}}]],["$","$Ld",null,{"children":["$","$Le",null,{"theme":"$f","defaultMode":"system","children":[["$","$L10",null,{"enableColorScheme":true}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}],["$","$L11",null,{"gaId":"G-P6NE4VJRLC"}]]}]}]
12:I[4933,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
13:I[787,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
14:I[1309,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
15:I[9595,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
18:I[5436,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
19:I[7013,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
1a:I[8173,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],""]
1b:I[9234,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
1c:I[2282,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
1d:I[6656,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
1e:I[3345,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
1f:I[9561,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
16:T1811,
## 들어가며
github page 기능을 이용해서 수많은 사람들이 블로그로 애용 했습니다.
그렇지만 나는 이미지 파일 하나 올릴껀데? jekyll 블로그를 써야해? 라는 사람이 있겠죠?
그런 사람을 위해서 준비했습니다!

## summary
webpack 을 이용해서 번들링할 예정이고, 
github action 을 통한 빌드와 배포 자동화를 진행할 예정입니다.

최근에 githuab pages 가 업데이트되어 별도의 설정 메뉴로 빠졌습니다!

![github pages](https://docs.github.com/assets/cb-70869/images/help/pages/publishing-source-drop-down.png)

이번 업데이트로 특정 branch 를 github page 로 지정 가능합니다. 아래와 같이 운영할 예정입니다.
 - gh-pages branch 를 github page 용도로 사용할 예정입니다.
 - main branch 는 소스코드를 저장할 용도입니다.

## 빌드를 설정하자
webpack 빌드 설정에 대해서는 이미 많이 다루고 있으니, 여기에서는 적지 않겠습니다. github action 을 통해서 빌드를 먼저 하도록 하겠습니다.

먼저 yml 파일을 생성합니다.
```bash
.github/workflows/deploy.yml
```

다음과 같이 작성할 예정입니다!
```yml
name: Build and deploy
on: 
  push: 
    branches: [ main ]
jobs: 
  build:
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@main
      - name: set up node.js
        uses: actions/setup-node@main
        with:
          node-version: 16.x
      - name: cache node_modules
        uses: actions/cache@v1
        with: 
          path: node_modules
          key: ${{runner.OS}}-build-$${hashFiles('**/package-lock.json')}
          restore-keys: |
            ${{runner.OS}}-build-${{runner.OS}}-build
      - name: install devDependencies
        run: npm install
      - name: build
        run: npm run prod
      - name: deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          publish_branch: gh-pages
          publish_dir: ./dist
```

천천히 항목별로 설명 드리겠습니다.

```yml
name: Build and deploy
on: 
  push: 
    branches: [ main ]
```
main branch 를 통해서 pipeline 이 유발되도록 세팅했습니다.

```yml
jobs: 
  build:
    runs-on: ubuntu-latest
```
ubuntu 20.04 버젼 기반으로 pipeline 이 작동하기 위해서 명시합니다. [참고](https://github.com/actions/virtual-environments)

```yml
      - uses: actions/checkout@main
      - name: set up node.js
        uses: actions/setup-node@main
        with:
          node-version: 16.x
```
빌드를 위해서 소스코드 받아야 겠죠? checkout 구현을 위해서 steps 에 추가합니다. (actions/checkout@main)
또한 webpack 빌드를 위해서 node 를 설치합니다. (actions/setup-node@main) node-version 변수를 통해서 node 버젼 설정이 가능합니다.
지원하는 메이저 버젼은 여기에서 [참고](https://github.com/actions/setup-node) 하세요. 

```yml
      - name: cache node_modules
        uses: actions/cache@v1
        with: 
          path: node_modules
          key: ${{runner.OS}}-build-$${hashFiles('**/package-lock.json')}
          restore-keys: |
            ${{runner.OS}}-build-${{runner.OS}}-build
```

이 부분은 npm dependency module 설치를 캐쉬하여, gitlab action 에 실행시간을 줄여주는데 목적이 있습니다. [참고](https://github.com/actions/cache)

```yml
      - name: install devDependencies
        run: npm install
      - name: build
        run: npm run prod
```
이 부분은 실제 빌드를 위한 dependency 와 빌드 명령어를 쓰는데 목적이 있습니다.
(중요하지 않아 빠르게 넘어가겠습니다!)

```yml
      - name: deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          publish_branch: gh-pages
          publish_dir: ./dist
```
이 부분이 중요 키포인트 인데요. 실제 빌드가 완료된 결과물들을 github page로 배포하기 위한 스텝입니다. 

먼저 저 github_token 항목은 별도로 설정이 필요한 항목이 아닙니다!

> A GitHub Actions runner automatically creates a GITHUB_TOKEN secret to authenticate in your workflow. So, you can start to deploy immediately without any configuration.

github action 이 자동적으로 생성한다고 합니다

나머지 설정은 다음과 같습니다. (추가 옵션은 여기를 [참고](https://github.com/peaceiris/actions-gh-pages) 하세요)
 - publish_branch - 빌드할 결과물들을 올릴 branch 입니다. 여기에선 gh-pages 로
 - publish_dir - 빌드할 결과물들이 저장될 디렉토리입니다. 각자 webpack 설정에 따라서 변경하세요. 저는 dist 로 설정했습니다.


## github pages 설정하기

아까 공유 드렸던 내용대로 githuab pages 가 업데이트되어 별도의 설정 메뉴로 빠졌습니다!

![github pages](https://docs.github.com/assets/cb-70869/images/help/pages/publishing-source-drop-down.png)

해당 설정 페이지에서 branch 를 gh-pages 로 설정하고, 경로는 / 로 설정해주세요
(gh-branch 에서 / 디렉토리로 서비스될 예정입니다!)

Ref.
* [Configuring a publishing source for your GitHub Pages site](https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site)
* [GitHub Actions Virtual Environments](https://github.com/actions/virtual-environments)
* [Checkout V3](https://github.com/actions/checkout)
* [setup-node](https://github.com/actions/setup-node)
* [cache](https://github.com/actions/cache)
* [peaceiris/actions-gh-pages](https://github.com/peaceiris/actions-gh-pages)
* [Github Actions를 이용하여 gh-pages 자동 배포하기](https://davidyang2149.dev/front-end/github-actions%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-gh-pages-%EC%9E%90%EB%8F%99-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/)
* [CI/CD ② GitHub Actions로 Vue.js 자동 배포](https://velog.io/@xxell-8/GitHub-Pages-%ED%99%9C%EC%9A%A9-GitHub-Actions%EB%A1%9C-Vue.js-%EC%9E%90%EB%8F%99-%EB%B0%B0%ED%8F%AC)17:T2c65,"use strict";
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = {
    a: "a",
    blockquote: "blockquote",
    code: "code",
    h2: "h2",
    img: "img",
    li: "li",
    p: "p",
    pre: "pre",
    ul: "ul",
    ..._provideComponents(),
    ...props.components
  };
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "들어가며"
    }), "\n", _jsx(_components.p, {
      children: "github page 기능을 이용해서 수많은 사람들이 블로그로 애용 했습니다.\n그렇지만 나는 이미지 파일 하나 올릴껀데? jekyll 블로그를 써야해? 라는 사람이 있겠죠?\n그런 사람을 위해서 준비했습니다!"
    }), "\n", _jsx(_components.h2, {
      children: "summary"
    }), "\n", _jsx(_components.p, {
      children: "webpack 을 이용해서 번들링할 예정이고,\ngithub action 을 통한 빌드와 배포 자동화를 진행할 예정입니다."
    }), "\n", _jsx(_components.p, {
      children: "최근에 githuab pages 가 업데이트되어 별도의 설정 메뉴로 빠졌습니다!"
    }), "\n", _jsx(_components.p, {
      children: _jsx(_components.img, {
        src: "https://docs.github.com/assets/cb-70869/images/help/pages/publishing-source-drop-down.png",
        alt: "github pages"
      })
    }), "\n", _jsx(_components.p, {
      children: "이번 업데이트로 특정 branch 를 github page 로 지정 가능합니다. 아래와 같이 운영할 예정입니다."
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsx(_components.li, {
        children: "gh-pages branch 를 github page 용도로 사용할 예정입니다."
      }), "\n", _jsx(_components.li, {
        children: "main branch 는 소스코드를 저장할 용도입니다."
      }), "\n"]
    }), "\n", _jsx(_components.h2, {
      children: "빌드를 설정하자"
    }), "\n", _jsx(_components.p, {
      children: "webpack 빌드 설정에 대해서는 이미 많이 다루고 있으니, 여기에서는 적지 않겠습니다. github action 을 통해서 빌드를 먼저 하도록 하겠습니다."
    }), "\n", _jsx(_components.p, {
      children: "먼저 yml 파일을 생성합니다."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-bash",
        children: ".github/workflows/deploy.yml\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "다음과 같이 작성할 예정입니다!"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-yml",
        children: "name: Build and deploy\non: \n  push: \n    branches: [ main ]\njobs: \n  build:\n    runs-on: ubuntu-latest\n    steps: \n      - uses: actions/checkout@main\n      - name: set up node.js\n        uses: actions/setup-node@main\n        with:\n          node-version: 16.x\n      - name: cache node_modules\n        uses: actions/cache@v1\n        with: \n          path: node_modules\n          key: ${{runner.OS}}-build-$${hashFiles('**/package-lock.json')}\n          restore-keys: |\n            ${{runner.OS}}-build-${{runner.OS}}-build\n      - name: install devDependencies\n        run: npm install\n      - name: build\n        run: npm run prod\n      - name: deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{secrets.GITHUB_TOKEN}}\n          publish_branch: gh-pages\n          publish_dir: ./dist\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "천천히 항목별로 설명 드리겠습니다."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-yml",
        children: "name: Build and deploy\non: \n  push: \n    branches: [ main ]\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "main branch 를 통해서 pipeline 이 유발되도록 세팅했습니다."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-yml",
        children: "jobs: \n  build:\n    runs-on: ubuntu-latest\n"
      })
    }), "\n", _jsxs(_components.p, {
      children: ["ubuntu 20.04 버젼 기반으로 pipeline 이 작동하기 위해서 명시합니다. ", _jsx(_components.a, {
        href: "https://github.com/actions/virtual-environments",
        children: "참고"
      })]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-yml",
        children: "      - uses: actions/checkout@main\n      - name: set up node.js\n        uses: actions/setup-node@main\n        with:\n          node-version: 16.x\n"
      })
    }), "\n", _jsxs(_components.p, {
      children: ["빌드를 위해서 소스코드 받아야 겠죠? checkout 구현을 위해서 steps 에 추가합니다. (actions/checkout@main)\n또한 webpack 빌드를 위해서 node 를 설치합니다. (actions/setup-node@main) node-version 변수를 통해서 node 버젼 설정이 가능합니다.\n지원하는 메이저 버젼은 여기에서 ", _jsx(_components.a, {
        href: "https://github.com/actions/setup-node",
        children: "참고"
      }), " 하세요."]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-yml",
        children: "      - name: cache node_modules\n        uses: actions/cache@v1\n        with: \n          path: node_modules\n          key: ${{runner.OS}}-build-$${hashFiles('**/package-lock.json')}\n          restore-keys: |\n            ${{runner.OS}}-build-${{runner.OS}}-build\n"
      })
    }), "\n", _jsxs(_components.p, {
      children: ["이 부분은 npm dependency module 설치를 캐쉬하여, gitlab action 에 실행시간을 줄여주는데 목적이 있습니다. ", _jsx(_components.a, {
        href: "https://github.com/actions/cache",
        children: "참고"
      })]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-yml",
        children: "      - name: install devDependencies\n        run: npm install\n      - name: build\n        run: npm run prod\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "이 부분은 실제 빌드를 위한 dependency 와 빌드 명령어를 쓰는데 목적이 있습니다.\n(중요하지 않아 빠르게 넘어가겠습니다!)"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-yml",
        children: "      - name: deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{secrets.GITHUB_TOKEN}}\n          publish_branch: gh-pages\n          publish_dir: ./dist\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "이 부분이 중요 키포인트 인데요. 실제 빌드가 완료된 결과물들을 github page로 배포하기 위한 스텝입니다."
    }), "\n", _jsx(_components.p, {
      children: "먼저 저 github_token 항목은 별도로 설정이 필요한 항목이 아닙니다!"
    }), "\n", _jsxs(_components.blockquote, {
      children: ["\n", _jsx(_components.p, {
        children: "A GitHub Actions runner automatically creates a GITHUB_TOKEN secret to authenticate in your workflow. So, you can start to deploy immediately without any configuration."
      }), "\n"]
    }), "\n", _jsx(_components.p, {
      children: "github action 이 자동적으로 생성한다고 합니다"
    }), "\n", _jsxs(_components.p, {
      children: ["나머지 설정은 다음과 같습니다. (추가 옵션은 여기를 ", _jsx(_components.a, {
        href: "https://github.com/peaceiris/actions-gh-pages",
        children: "참고"
      }), " 하세요)"]
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsx(_components.li, {
        children: "publish_branch - 빌드할 결과물들을 올릴 branch 입니다. 여기에선 gh-pages 로"
      }), "\n", _jsx(_components.li, {
        children: "publish_dir - 빌드할 결과물들이 저장될 디렉토리입니다. 각자 webpack 설정에 따라서 변경하세요. 저는 dist 로 설정했습니다."
      }), "\n"]
    }), "\n", _jsx(_components.h2, {
      children: "github pages 설정하기"
    }), "\n", _jsx(_components.p, {
      children: "아까 공유 드렸던 내용대로 githuab pages 가 업데이트되어 별도의 설정 메뉴로 빠졌습니다!"
    }), "\n", _jsx(_components.p, {
      children: _jsx(_components.img, {
        src: "https://docs.github.com/assets/cb-70869/images/help/pages/publishing-source-drop-down.png",
        alt: "github pages"
      })
    }), "\n", _jsx(_components.p, {
      children: "해당 설정 페이지에서 branch 를 gh-pages 로 설정하고, 경로는 / 로 설정해주세요\n(gh-branch 에서 / 디렉토리로 서비스될 예정입니다!)"
    }), "\n", _jsx(_components.p, {
      children: "Ref."
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsx(_components.li, {
        children: _jsx(_components.a, {
          href: "https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site",
          children: "Configuring a publishing source for your GitHub Pages site"
        })
      }), "\n", _jsx(_components.li, {
        children: _jsx(_components.a, {
          href: "https://github.com/actions/virtual-environments",
          children: "GitHub Actions Virtual Environments"
        })
      }), "\n", _jsx(_components.li, {
        children: _jsx(_components.a, {
          href: "https://github.com/actions/checkout",
          children: "Checkout V3"
        })
      }), "\n", _jsx(_components.li, {
        children: _jsx(_components.a, {
          href: "https://github.com/actions/setup-node",
          children: "setup-node"
        })
      }), "\n", _jsx(_components.li, {
        children: _jsx(_components.a, {
          href: "https://github.com/actions/cache",
          children: "cache"
        })
      }), "\n", _jsx(_components.li, {
        children: _jsx(_components.a, {
          href: "https://github.com/peaceiris/actions-gh-pages",
          children: "peaceiris/actions-gh-pages"
        })
      }), "\n", _jsx(_components.li, {
        children: _jsx(_components.a, {
          href: "https://davidyang2149.dev/front-end/github-actions%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-gh-pages-%EC%9E%90%EB%8F%99-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/",
          children: "Github Actions를 이용하여 gh-pages 자동 배포하기"
        })
      }), "\n", _jsx(_components.li, {
        children: _jsx(_components.a, {
          href: "https://velog.io/@xxell-8/GitHub-Pages-%ED%99%9C%EC%9A%A9-GitHub-Actions%EB%A1%9C-Vue.js-%EC%9E%90%EB%8F%99-%EB%B0%B0%ED%8F%AC",
          children: "CI/CD ② GitHub Actions로 Vue.js 자동 배포"
        })
      }), "\n"]
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = {
    ..._provideComponents(),
    ...props.components
  };
  return MDXLayout ? _jsx(MDXLayout, {
    ...props,
    children: _jsx(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
return {
  default: MDXContent
};
5:[["$","$L12",null,{}],["$","$L13",null,{}],["$","$L14",null,{"title":"github action / github page 기능을 이용한 static deploy","summary":"github page 기능을 이용해서 수많은 사람들이 블로그로 애용 했습니다. 그렇지만 나는 이미지 파일 하나 올릴껀데? jekyll 블로그를 써야해? 라는 사람이 있겠죠? 그런 사람을 위해서 준비했습니다!","date":"3 years ago","category":"coding"}],["$","$L15",null,{"post":{"slug":"github-page-static-deploy","title":"github action / github page 기능을 이용한 static deploy","date":"$D2022-03-01T15:00:00.000Z","summary":"github page 기능을 이용해서 수많은 사람들이 블로그로 애용 했습니다. 그렇지만 나는 이미지 파일 하나 올릴껀데? jekyll 블로그를 써야해? 라는 사람이 있겠죠? 그런 사람을 위해서 준비했습니다!","category":"coding","image":"https://images.velog.io/images/youngerjesus/post/5b9f5629-efd2-4a03-91da-052c63109ed9/github%20actions.png","embeddedImagesLocal":"$undefined","tags":["dev","coding","github","github page","ci","cd"],"content":"$16","source":{"compiledSource":"$17","frontmatter":{},"scope":{}},"roadAddress":"$undefined","parcelAddress":"$undefined","lat":"$undefined","lng":"$undefined","viewCount":19}}],["$","$L18",null,{"maxWidth":"lg","sx":{"mx":"auto","width":"100%","p":2},"children":[["$","$L19",null,{"sx":{"my":3}}],["$","$L18",null,{"sx":{"mb":3},"children":["$","$L18",null,{"sx":{"mt":1,"display":"flex","flexWrap":"wrap","gap":1},"children":[["$","$L1a","0",{"href":"/tag/dev","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"dev","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","1",{"href":"/tag/coding","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"coding","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","2",{"href":"/tag/github","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"github","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","3",{"href":"/tag/github-page","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"github page","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","4",{"href":"/tag/ci","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"ci","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","5",{"href":"/tag/cd","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"cd","sx":{"textTransform":"lowercase"}}]}]]}]}],["$","$L18",null,{"sx":{"display":"flex","justifyContent":"space-between","alignItems":"center","flexWrap":"wrap","gap":1},"children":[["$","$L1c",null,{"component":"$1d","href":"/article/quarter-view","variant":"outlined","color":"primary","sx":{"textAlign":"left"},"children":["← ","2.5D 구현하기 - 쿼터뷰"]}],["$","$L1c",null,{"component":"$1d","href":"/article/svn-to-git","variant":"outlined","color":"primary","sx":{"ml":"auto","textAlign":"right"},"children":["svn 사용자를 위한 git 안내서"," →"]}]]}]]}],["$","$L18",null,{"py":2,"mt":4,"component":"footer","children":["$","$L1e",null,{"maxWidth":"lg","sx":{"display":"flex","flexDirection":{"xs":"column","md":"row"},"justifyContent":{"xs":"center","md":"space-between"},"alignItems":"center","gap":2},"children":[["$","$L1f",null,{"variant":"body2","children":["© ","2022-2025"," ","Yeppyshiba Blog",". All rights reserved."]}],["$","$L1f",null,{"variant":"body2","children":["$","$L1d",null,{"href":"https://www.flaticon.com/free-icons/akita-inu","target":"_blank","rel":"noopener noreferrer","title":"akita inu icons","underline":"hover","color":"primary","children":"Akita inu icons created by tulpahn - Flaticon"}]}]]}]}]]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"github action / github page 기능을 이용한 static deploy - Yeppyshiba Blog"}],["$","meta","2",{"name":"description","content":"github page 기능을 이용해서 수많은 사람들이 블로그로 애용 했습니다. 그렇지만 나는 이미지 파일 하나 올릴껀데? jekyll 블로그를 써야해? 라는 사람이 있겠죠? 그런 사람을 위해서 준비했습니다!"}],["$","meta","3",{"name":"keywords","content":"dev, coding, github, github page, ci, cd"}],["$","link","4",{"rel":"canonical","href":"/article/github-page-static-deploy"}],["$","meta","5",{"property":"og:title","content":"github action / github page 기능을 이용한 static deploy"}],["$","meta","6",{"property":"og:description","content":"github page 기능을 이용해서 수많은 사람들이 블로그로 애용 했습니다. 그렇지만 나는 이미지 파일 하나 올릴껀데? jekyll 블로그를 써야해? 라는 사람이 있겠죠? 그런 사람을 위해서 준비했습니다!"}],["$","meta","7",{"property":"og:url","content":"https://blog.yeppyshiba.com/article/github-page-static-deploy"}],["$","meta","8",{"property":"og:image","content":"https://images.velog.io/images/youngerjesus/post/5b9f5629-efd2-4a03-91da-052c63109ed9/github%20actions.png"}],["$","meta","9",{"property":"og:type","content":"website"}],["$","meta","10",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","11",{"name":"twitter:title","content":"github action / github page 기능을 이용한 static deploy"}],["$","meta","12",{"name":"twitter:description","content":"github page 기능을 이용해서 수많은 사람들이 블로그로 애용 했습니다. 그렇지만 나는 이미지 파일 하나 올릴껀데? jekyll 블로그를 써야해? 라는 사람이 있겠죠? 그런 사람을 위해서 준비했습니다!"}],["$","meta","13",{"name":"twitter:image","content":"https://images.velog.io/images/youngerjesus/post/5b9f5629-efd2-4a03-91da-052c63109ed9/github%20actions.png"}],["$","link","14",{"rel":"icon","href":"/images/akita-inu.png"}]]
7:null
