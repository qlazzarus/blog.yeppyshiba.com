1:"$Sreact.fragment"
3:I[5244,[],""]
4:I[3866,[],""]
6:I[6213,[],"OutletBoundary"]
8:I[6213,[],"MetadataBoundary"]
a:I[6213,[],"ViewportBoundary"]
c:I[4835,[],""]
:HL["/_next/static/media/47cbc4e2adbc5db9-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/acfb4e572a721580.css","style"]
0:{"P":null,"b":"K66r6ptgLjfZKMy0nD8C_","p":"","c":["","article","integer-array-php-implementation"],"i":false,"f":[[["",{"children":["article",{"children":[["slug","integer-array-php-implementation","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/acfb4e572a721580.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],"$L2"]}],{"children":["article",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","integer-array-php-implementation","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":"$L7"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","Um4CLC6l8Viubzc-vrbgw",{"children":[["$","$L8",null,{"children":"$L9"}],["$","$La",null,{"children":"$Lb"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
d:I[6269,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"default"]
e:I[4527,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"default"]
f:I[1392,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"default"]
10:I[457,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"default"]
11:I[766,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"GoogleAnalytics"]
2:["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","body",null,{"children":[[["$","script","mui-color-scheme-init",{"suppressHydrationWarning":true,"nonce":"$undefined","dangerouslySetInnerHTML":{"__html":"(function() {\ntry {\n  let colorScheme = '';\n  const mode = localStorage.getItem('mui-mode') || 'system';\n  const dark = localStorage.getItem('mui-color-scheme-dark') || 'dark';\n  const light = localStorage.getItem('mui-color-scheme-light') || 'light';\n  if (mode === 'system') {\n    // handle system mode\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      colorScheme = dark\n    } else {\n      colorScheme = light\n    }\n  }\n  if (mode === 'light') {\n    colorScheme = light;\n  }\n  if (mode === 'dark') {\n    colorScheme = dark;\n  }\n  if (colorScheme) {\n    document.documentElement.classList.remove('%s'.replace('%s', light), '%s'.replace('%s', dark));\n      document.documentElement.classList.add('%s'.replace('%s', colorScheme));document.documentElement.setAttribute('.%s', colorScheme);\n  }\n} catch(e){}})();"}}]],["$","$Ld",null,{"children":["$","$Le",null,{"theme":"$f","defaultMode":"system","children":[["$","$L10",null,{"enableColorScheme":true}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],["$","$L11",null,{"gaId":"314819162"}]]}]
12:I[4933,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-e6c964af98a44d22.js"],"default"]
13:I[787,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-e6c964af98a44d22.js"],"default"]
14:I[1309,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-e6c964af98a44d22.js"],"default"]
15:I[9595,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-e6c964af98a44d22.js"],"default"]
18:I[5436,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-e6c964af98a44d22.js"],"default"]
19:I[7013,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-e6c964af98a44d22.js"],"default"]
1a:I[8173,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-e6c964af98a44d22.js"],""]
1b:I[9234,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-e6c964af98a44d22.js"],"default"]
1c:I[2282,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-e6c964af98a44d22.js"],"default"]
1d:I[6656,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-e6c964af98a44d22.js"],"default"]
1e:I[3345,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-e6c964af98a44d22.js"],"default"]
1f:I[9561,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-e6c964af98a44d22.js"],"default"]
16:T2b62,
기본적으로 PHP 의 배열은 일반적인 ArrayList 구현이 아니라, Hash Table 입니다.  
그러다보니 php 개발자들은 배열을 배열처럼 쓰지 않고 Hash Table 처럼 이용하는 분들이 많습니다.  
(나쁜거 아니에요!)

```php
$a = ['q_lazzarus' => '킹왕짱'];
echo $a['q_lazzarus'];
```

다시 기초로 돌아가자면, array 는 동일한 자료구조의 반복 입니다.

![array data structure](https://media.geeksforgeeks.org/wp-content/uploads/array-2.png)

메모리 단위에서 생각해보면 동일한 크기의 방이 주루룩 있는 구조이죠.

![](https://cdn.pixabay.com/photo/2016/11/06/19/57/hotel-1803960_960_720.jpg)

!!

그렇다면, string 하나에 integer 몰빵해서 넣으면 되자너?

![profit!!](https://www.mememaker.net/static/images/memes/4293316.jpg)

## 구현해보자 !

5개의 원소가 있는 배열이 있다고 가정하고 데이터를 읽는 간단한 함수를 만들어 보겠습니다.

```php
function array_get($i) {
    $data = '12345';
    return substr($data, $i, 1);
}

echo array_get(3);
```

```
3
```

짜잔! 이렇게 string 변수를 참조하여, 값을 리턴하는 간단한 코드가 만들어졌습니다.  
하지만 당연하게도 이건 못 씁니다.  
왜냐하면 원소의 데이터가 0~9 까지만 허용하는 말도 안되는 구현이기 때문입니다.

## 자료형 ??

가만히 다시 생각해 봅시다. 설마 integer 데이터를 메모리에 string 처럼 저장하지 않겠죠...  
보통의 경우 integer 자료형은 4 Bytes 를 차지하고 있습니다.

| Data Type              | Size (in bytes) | Range                           |
| ---------------------- | --------------- | ------------------------------- |
| short int              | 2               | -32,768 to 32,767               |
| unsigned short int     | 2               | 0 to 65,535                     |
| unsigned int           | 4               | 0 to 4,294,967,295              |
| int                    | 4               | -2,147,483,648 to 2,147,483,647 |
| long int               | 4               | -2,147,483,648 to 2,147,483,647 |
| unsigned long int      | 4               | 0 to 4,294,967,295              |
| long long int          | 8               | -(2^63) to (2^63)-1             |
| unsigned long long int | 8               | 0 to 18,446,744,073,709,551,615 |
| singed char            | 1               | -128 to 127                     |
| unsigned char          | 1               | 0 to 255                        |

호오 그렇다면? 데이터를 변환해서 넣도록 하겠습니다.  
다행히 php 에서는 [pack](https://www.php.net/manual/en/function.pack.php) 이라는 함수가 이러한 변환을 편하게 도와줍니다.

```php
$data = str_repeat(pack('I', null), 5);

function array_get($i) {
    global $data;
    $binary = substr($data, $i * 4, 4);
    $unpack = unpack('I', $binary);
    return $unpack[1];
}

function array_set($i, $value) {
    global $data;
    $binary = pack('I', $value);
    $data = substr_replace($data, $binary, $i * 4, 4);
}

array_set(3, 65535);
echo array_get(3);
```

```
65535
```

오 이번에는 10 을 넘어서 심지어 65535 도 잘 나오고 있습니다.  
하지만 아직 문제가 있습니다.

```php
echo array_get(2);
```

```
0
```

아니 어떻게 된 일이죠?? 분명히 공간만 만들어주기 위해서 null 을 넣어주었는데?

사실은 integer 자료형에서는 null 은 없습니다.  
왜냐하면 null 은 null 이기 때문입니다. (자료형도 달라요)  
그렇다보니 저희가 만든 함수에서는 null 은 처리가 불가능 합니다.  
그럼 어떻게 해야할까요?

![](https://i.pinimg.com/236x/58/47/f7/5847f7d07e2d99eda5f80bfa36901bad--kermit-the-frog-random-stuff.jpg)

## 꼼수 ??

생각해보면 데이터를 넣을때 한칸씩 미루면 되지 않을까요?

```php
$data = str_repeat(pack('I', 0), 5);

function array_get($i) {
    global $data;
    $binary = substr($data, $i * 4, 4);
    $unpack = unpack('I', $binary);
    $result = $unpack[1];
    if (0 === $result) {
        return null;
    }
    return $result - 1;
}

function array_set($i, $value) {
    global $data;
    if (null !== $value) {
        $value = $value + 1;
    }
    $binary = pack('I', $value);
    $data = substr_replace($data, $binary, $i * 4, 4);
}

var_dump(array_get(3));
```

```
NULL
```

이렇게 되면 데이터 제한이 4,294,967,295 에서 하나 소모가 되지만,  
이 정도면 괜찮은 것 같습니다.

## 실제 배열처럼 바꿔 보아요

어느정도 된 것 같습니다. 하지만 이것을 실제 배열 처럼 쓰기에는 아직 부족합니다.  
그래서 php 에서는 Array 구현하기 위한 [interface](https://www.php.net/manual/en/class.arrayaccess.php) 를 제공합니다.

```php
ArrayAccess {
    /* Methods */
    abstract public offsetExists ( mixed $offset ) : bool
    abstract public offsetGet ( mixed $offset ) : mixed
    abstract public offsetSet ( mixed $offset , mixed $value ) : void
    abstract public offsetUnset ( mixed $offset ) : void
}
```

클래스를 마치 php 기본 배열 처럼 접근 가능하게 하는 구현체이며  
제한적인 의미로 accessor overloading 입니다.

```php
$obj = new obj;
$obj[] = 'hello';
$obj[] = 'world';

echo $obj[0] . ' ' . $obj[1];
```

```
hello world
```

## 실제 구현은?

```php
class FixedUnsignedIntegerArray implements Iterator, ArrayAccess, Countable
{
    const BINARY_FORMAT = 'I';
    private $position = 0;
    private $length = 0;
    private $binaryLength = 0;
    private $data = null;
    public function __construct($length)

    {
        $null = $this->convertBinary(null);
        $this->position = 0;
        $this->length = $length;
        // because binary length is machine dependency
        $this->binaryLength = strlen($null);
        $this->data = str_repeat($null, $length);
    }

    private function getEntry($position)
    {
        $position = $position * $this->binaryLength;
        $unpack = unpack(self::BINARY_FORMAT, substr($this->data, $position, $this->binaryLength));
        $result = false !== $unpack ? $unpack[1] : null;
        if (0 === $result) {
            return null;
        } else {
            return $result - 1;
        }
    }

    private function setEntry($position, $value)
    {
        $position = $position * $this->binaryLength;
        $this->data = substr_replace($this->data, $this->convertBinary($value), $position, $this->binaryLength);
    }

    private function convertBinary($value)
    {
        if (null !== $value) {
            $value = $value + 1;
        }
        return pack(self::BINARY_FORMAT, $value);
    }

    public function rewind()
    {
        $this->position = 0;
    }

    public function current()
    {
        return $this->getEntry($this->position);
    }

    public function key()
    {
        return $this->position;
    }

    public function next()
    {
        $this->position = $this->position + 1;
    }

    public function valid()
    {
        return $this->offsetExists($this->position);
    }

    public function offsetSet($offset, $value)
    {
        if (is_integer($offset) && $offset < $this->length && $offset >= 0) {
            $this->setEntry($offset, $value);
        } else {
            throw new InvalidArgumentException('overflow array offset');
        }
    }

    public function offsetExists($offset)
    {
        return ($offset < $this->length && $offset >= 0);
    }

    public function offsetUnset($offset)
    {
        $this->setEntry($offset, null);
    }

    public function offsetGet($offset)
    {
        return $this->getEntry($offset);
    }

    public function count()
    {
        return $this->length;
    }
}
```

[pack](https://www.php.net/manual/en/function.pack.php) 함수의 설명을 다시 보자면, 환경에 따라 다른 byte 수가 나올 수 있습니다.

> unsigned integer (machine dependent size and byte order)

따라서 integer byte 수를 저희가 알고 있어야 잘못된 주소를 참조하지 않도록 하겠습니다.  
실제 구현에서는 [Iterator](https://www.php.net/manual/en/class.arrayaccess.php), [ArrayAccess](https://www.php.net/manual/en/class.arrayaccess.php), [Countable](https://www.php.net/manual/en/class.countable.php) 을 구현하여 좀 더 효용성을 높였습니다.

## 성능 테스트!

이제 구현했으니, 성능을 테스트 해보겠습니다.

테스트는 다음과 같이 진행하였습니다.

1. 10000 크기의 고정 배열을 만들어서 랜덤으로 데이터를 넣었을때 메모리 사용량을 체크 하였습니다.
2. 100번씩 반복문을 실행하여, 실행 시간의 평균을 체크 하였습니다.

```php
define('ARRAY_LENGTH', 10000);

$start_memory = memory_get_usage();
$vanilla = [];
for ($i = 0; $i < ARRAY_LENGTH; $i++) {
    $vanilla[] = mt_rand(0, 255);
}

$end_memory = memory_get_usage() - $start_memory;
echo "legacy array memory usage : {$end_memory}\n";

$start = microtime(true);
$result = 0;
for ($i = 0; $i < ARRAY_LENGTH; $i++) {
    $result += $vanilla[$i];
}

$time_elapsed_secs = microtime(true) - $start;
echo "for iterator legacy array : {$time_elapsed_secs}\n";

$start_memory = memory_get_usage();
$entries = new \Monoless\Arrays\FixedUnsignedIntegerArray(ARRAY_LENGTH);
for ($i = 0; $i < ARRAY_LENGTH; $i++) {
    $entries[$i] = mt_rand(0, 255);
}

$end_memory = memory_get_usage() - $start_memory;
echo "fixed unsigned integer array memory usage : {$end_memory}\n";

$time_total = 0;
$interval = 100;
for ($j = 0; $j < $interval; $j++) {
    $start = microtime(true);

    $result = 0;
    for ($i = 0; $i < ARRAY_LENGTH; $i++) {
        $result += $entries[$i];
    }

    $time_elapsed_secs = microtime(true) - $start;
    $time_total += $time_elapsed_secs;
}

$time_average = $time_total / $interval;
echo "iterator speed average : {$time_average}\n";
```

```
legacy array memory usage : 528440
for iterator legacy array : 0.00035810470581055
fixed unsigned integer array memory usage : 41072
iterator speed average : 0.0068418407440186
```

메모리 사용량은 약 90% 개선이 되었으나 속도는 기존 배열을 이길 수가 없었네요...

![오늘도 망했어요...](https://sayingimages.com/wp-content/uploads/try-again-fail-meme.png)

역시 기존껄 쓰는거 좋은거라고 배우고... 오늘도 맥주와 치킨을 시키며 잡니다.  
그래도 제 삽질이 좋다면, [github](https://github.com/q_lazzarus/arrays) 와 이 [패키지](https://packagist.org/packages/q_lazzarus/arrays)를 참고하세요

## 후일담...

혹시나 싶어서 php://memory 에 fwrite / fseek 를 구현해봤는데 더 느렸습니다...

```
for iterator legacy array : 0.0013089179992676
string speed average : 0.0084279131889343
php://memory speed average : 0.0098107981681824
```

### 참조 사이트

- https://www.php.net/manual/en/language.types.array.php
- https://www.geeksforgeeks.org/array-data-structure/
- https://www.geeksforgeeks.org/c-data-types/
17:T5047,"use strict";
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = {
    a: "a",
    blockquote: "blockquote",
    br: "br",
    code: "code",
    h2: "h2",
    h3: "h3",
    img: "img",
    li: "li",
    ol: "ol",
    p: "p",
    pre: "pre",
    table: "table",
    tbody: "tbody",
    td: "td",
    th: "th",
    thead: "thead",
    tr: "tr",
    ul: "ul",
    ..._provideComponents(),
    ...props.components
  };
  return _jsxs(_Fragment, {
    children: [_jsxs(_components.p, {
      children: ["기본적으로 PHP 의 배열은 일반적인 ArrayList 구현이 아니라, Hash Table 입니다.", _jsx(_components.br, {}), "\n", "그러다보니 php 개발자들은 배열을 배열처럼 쓰지 않고 Hash Table 처럼 이용하는 분들이 많습니다.", _jsx(_components.br, {}), "\n", "(나쁜거 아니에요!)"]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "$a = ['q_lazzarus' => '킹왕짱'];\necho $a['q_lazzarus'];\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "다시 기초로 돌아가자면, array 는 동일한 자료구조의 반복 입니다."
    }), "\n", _jsx(_components.p, {
      children: _jsx(_components.img, {
        src: "https://media.geeksforgeeks.org/wp-content/uploads/array-2.png",
        alt: "array data structure"
      })
    }), "\n", _jsx(_components.p, {
      children: "메모리 단위에서 생각해보면 동일한 크기의 방이 주루룩 있는 구조이죠."
    }), "\n", _jsx(_components.p, {
      children: _jsx(_components.img, {
        src: "https://cdn.pixabay.com/photo/2016/11/06/19/57/hotel-1803960_960_720.jpg",
        alt: ""
      })
    }), "\n", _jsx(_components.p, {
      children: "!!"
    }), "\n", _jsx(_components.p, {
      children: "그렇다면, string 하나에 integer 몰빵해서 넣으면 되자너?"
    }), "\n", _jsx(_components.p, {
      children: _jsx(_components.img, {
        src: "https://www.mememaker.net/static/images/memes/4293316.jpg",
        alt: "profit!!"
      })
    }), "\n", _jsx(_components.h2, {
      children: "구현해보자 !"
    }), "\n", _jsx(_components.p, {
      children: "5개의 원소가 있는 배열이 있다고 가정하고 데이터를 읽는 간단한 함수를 만들어 보겠습니다."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "function array_get($i) {\n    $data = '12345';\n    return substr($data, $i, 1);\n}\n\necho array_get(3);\n"
      })
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "3\n"
      })
    }), "\n", _jsxs(_components.p, {
      children: ["짜잔! 이렇게 string 변수를 참조하여, 값을 리턴하는 간단한 코드가 만들어졌습니다.", _jsx(_components.br, {}), "\n", "하지만 당연하게도 이건 못 씁니다.", _jsx(_components.br, {}), "\n", "왜냐하면 원소의 데이터가 0~9 까지만 허용하는 말도 안되는 구현이기 때문입니다."]
    }), "\n", _jsx(_components.h2, {
      children: "자료형 ??"
    }), "\n", _jsxs(_components.p, {
      children: ["가만히 다시 생각해 봅시다. 설마 integer 데이터를 메모리에 string 처럼 저장하지 않겠죠...", _jsx(_components.br, {}), "\n", "보통의 경우 integer 자료형은 4 Bytes 를 차지하고 있습니다."]
    }), "\n", _jsxs(_components.table, {
      children: [_jsx(_components.thead, {
        children: _jsxs(_components.tr, {
          children: [_jsx(_components.th, {
            children: "Data Type"
          }), _jsx(_components.th, {
            children: "Size (in bytes)"
          }), _jsx(_components.th, {
            children: "Range"
          })]
        })
      }), _jsxs(_components.tbody, {
        children: [_jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: "short int"
          }), _jsx(_components.td, {
            children: "2"
          }), _jsx(_components.td, {
            children: "-32,768 to 32,767"
          })]
        }), _jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: "unsigned short int"
          }), _jsx(_components.td, {
            children: "2"
          }), _jsx(_components.td, {
            children: "0 to 65,535"
          })]
        }), _jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: "unsigned int"
          }), _jsx(_components.td, {
            children: "4"
          }), _jsx(_components.td, {
            children: "0 to 4,294,967,295"
          })]
        }), _jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: "int"
          }), _jsx(_components.td, {
            children: "4"
          }), _jsx(_components.td, {
            children: "-2,147,483,648 to 2,147,483,647"
          })]
        }), _jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: "long int"
          }), _jsx(_components.td, {
            children: "4"
          }), _jsx(_components.td, {
            children: "-2,147,483,648 to 2,147,483,647"
          })]
        }), _jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: "unsigned long int"
          }), _jsx(_components.td, {
            children: "4"
          }), _jsx(_components.td, {
            children: "0 to 4,294,967,295"
          })]
        }), _jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: "long long int"
          }), _jsx(_components.td, {
            children: "8"
          }), _jsx(_components.td, {
            children: "-(2^63) to (2^63)-1"
          })]
        }), _jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: "unsigned long long int"
          }), _jsx(_components.td, {
            children: "8"
          }), _jsx(_components.td, {
            children: "0 to 18,446,744,073,709,551,615"
          })]
        }), _jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: "singed char"
          }), _jsx(_components.td, {
            children: "1"
          }), _jsx(_components.td, {
            children: "-128 to 127"
          })]
        }), _jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: "unsigned char"
          }), _jsx(_components.td, {
            children: "1"
          }), _jsx(_components.td, {
            children: "0 to 255"
          })]
        })]
      })]
    }), "\n", _jsxs(_components.p, {
      children: ["호오 그렇다면? 데이터를 변환해서 넣도록 하겠습니다.", _jsx(_components.br, {}), "\n", "다행히 php 에서는 ", _jsx(_components.a, {
        href: "https://www.php.net/manual/en/function.pack.php",
        children: "pack"
      }), " 이라는 함수가 이러한 변환을 편하게 도와줍니다."]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "$data = str_repeat(pack('I', null), 5);\n\nfunction array_get($i) {\n    global $data;\n    $binary = substr($data, $i * 4, 4);\n    $unpack = unpack('I', $binary);\n    return $unpack[1];\n}\n\nfunction array_set($i, $value) {\n    global $data;\n    $binary = pack('I', $value);\n    $data = substr_replace($data, $binary, $i * 4, 4);\n}\n\narray_set(3, 65535);\necho array_get(3);\n"
      })
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "65535\n"
      })
    }), "\n", _jsxs(_components.p, {
      children: ["오 이번에는 10 을 넘어서 심지어 65535 도 잘 나오고 있습니다.", _jsx(_components.br, {}), "\n", "하지만 아직 문제가 있습니다."]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "echo array_get(2);\n"
      })
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "0\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "아니 어떻게 된 일이죠?? 분명히 공간만 만들어주기 위해서 null 을 넣어주었는데?"
    }), "\n", _jsxs(_components.p, {
      children: ["사실은 integer 자료형에서는 null 은 없습니다.", _jsx(_components.br, {}), "\n", "왜냐하면 null 은 null 이기 때문입니다. (자료형도 달라요)", _jsx(_components.br, {}), "\n", "그렇다보니 저희가 만든 함수에서는 null 은 처리가 불가능 합니다.", _jsx(_components.br, {}), "\n", "그럼 어떻게 해야할까요?"]
    }), "\n", _jsx(_components.p, {
      children: _jsx(_components.img, {
        src: "https://i.pinimg.com/236x/58/47/f7/5847f7d07e2d99eda5f80bfa36901bad--kermit-the-frog-random-stuff.jpg",
        alt: ""
      })
    }), "\n", _jsx(_components.h2, {
      children: "꼼수 ??"
    }), "\n", _jsx(_components.p, {
      children: "생각해보면 데이터를 넣을때 한칸씩 미루면 되지 않을까요?"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "$data = str_repeat(pack('I', 0), 5);\n\nfunction array_get($i) {\n    global $data;\n    $binary = substr($data, $i * 4, 4);\n    $unpack = unpack('I', $binary);\n    $result = $unpack[1];\n    if (0 === $result) {\n        return null;\n    }\n    return $result - 1;\n}\n\nfunction array_set($i, $value) {\n    global $data;\n    if (null !== $value) {\n        $value = $value + 1;\n    }\n    $binary = pack('I', $value);\n    $data = substr_replace($data, $binary, $i * 4, 4);\n}\n\nvar_dump(array_get(3));\n"
      })
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "NULL\n"
      })
    }), "\n", _jsxs(_components.p, {
      children: ["이렇게 되면 데이터 제한이 4,294,967,295 에서 하나 소모가 되지만,", _jsx(_components.br, {}), "\n", "이 정도면 괜찮은 것 같습니다."]
    }), "\n", _jsx(_components.h2, {
      children: "실제 배열처럼 바꿔 보아요"
    }), "\n", _jsxs(_components.p, {
      children: ["어느정도 된 것 같습니다. 하지만 이것을 실제 배열 처럼 쓰기에는 아직 부족합니다.", _jsx(_components.br, {}), "\n", "그래서 php 에서는 Array 구현하기 위한 ", _jsx(_components.a, {
        href: "https://www.php.net/manual/en/class.arrayaccess.php",
        children: "interface"
      }), " 를 제공합니다."]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "ArrayAccess {\n    /* Methods */\n    abstract public offsetExists ( mixed $offset ) : bool\n    abstract public offsetGet ( mixed $offset ) : mixed\n    abstract public offsetSet ( mixed $offset , mixed $value ) : void\n    abstract public offsetUnset ( mixed $offset ) : void\n}\n"
      })
    }), "\n", _jsxs(_components.p, {
      children: ["클래스를 마치 php 기본 배열 처럼 접근 가능하게 하는 구현체이며", _jsx(_components.br, {}), "\n", "제한적인 의미로 accessor overloading 입니다."]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "$obj = new obj;\n$obj[] = 'hello';\n$obj[] = 'world';\n\necho $obj[0] . ' ' . $obj[1];\n"
      })
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "hello world\n"
      })
    }), "\n", _jsx(_components.h2, {
      children: "실제 구현은?"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "class FixedUnsignedIntegerArray implements Iterator, ArrayAccess, Countable\n{\n    const BINARY_FORMAT = 'I';\n    private $position = 0;\n    private $length = 0;\n    private $binaryLength = 0;\n    private $data = null;\n    public function __construct($length)\n\n    {\n        $null = $this->convertBinary(null);\n        $this->position = 0;\n        $this->length = $length;\n        // because binary length is machine dependency\n        $this->binaryLength = strlen($null);\n        $this->data = str_repeat($null, $length);\n    }\n\n    private function getEntry($position)\n    {\n        $position = $position * $this->binaryLength;\n        $unpack = unpack(self::BINARY_FORMAT, substr($this->data, $position, $this->binaryLength));\n        $result = false !== $unpack ? $unpack[1] : null;\n        if (0 === $result) {\n            return null;\n        } else {\n            return $result - 1;\n        }\n    }\n\n    private function setEntry($position, $value)\n    {\n        $position = $position * $this->binaryLength;\n        $this->data = substr_replace($this->data, $this->convertBinary($value), $position, $this->binaryLength);\n    }\n\n    private function convertBinary($value)\n    {\n        if (null !== $value) {\n            $value = $value + 1;\n        }\n        return pack(self::BINARY_FORMAT, $value);\n    }\n\n    public function rewind()\n    {\n        $this->position = 0;\n    }\n\n    public function current()\n    {\n        return $this->getEntry($this->position);\n    }\n\n    public function key()\n    {\n        return $this->position;\n    }\n\n    public function next()\n    {\n        $this->position = $this->position + 1;\n    }\n\n    public function valid()\n    {\n        return $this->offsetExists($this->position);\n    }\n\n    public function offsetSet($offset, $value)\n    {\n        if (is_integer($offset) && $offset < $this->length && $offset >= 0) {\n            $this->setEntry($offset, $value);\n        } else {\n            throw new InvalidArgumentException('overflow array offset');\n        }\n    }\n\n    public function offsetExists($offset)\n    {\n        return ($offset < $this->length && $offset >= 0);\n    }\n\n    public function offsetUnset($offset)\n    {\n        $this->setEntry($offset, null);\n    }\n\n    public function offsetGet($offset)\n    {\n        return $this->getEntry($offset);\n    }\n\n    public function count()\n    {\n        return $this->length;\n    }\n}\n"
      })
    }), "\n", _jsxs(_components.p, {
      children: [_jsx(_components.a, {
        href: "https://www.php.net/manual/en/function.pack.php",
        children: "pack"
      }), " 함수의 설명을 다시 보자면, 환경에 따라 다른 byte 수가 나올 수 있습니다."]
    }), "\n", _jsxs(_components.blockquote, {
      children: ["\n", _jsx(_components.p, {
        children: "unsigned integer (machine dependent size and byte order)"
      }), "\n"]
    }), "\n", _jsxs(_components.p, {
      children: ["따라서 integer byte 수를 저희가 알고 있어야 잘못된 주소를 참조하지 않도록 하겠습니다.", _jsx(_components.br, {}), "\n", "실제 구현에서는 ", _jsx(_components.a, {
        href: "https://www.php.net/manual/en/class.arrayaccess.php",
        children: "Iterator"
      }), ", ", _jsx(_components.a, {
        href: "https://www.php.net/manual/en/class.arrayaccess.php",
        children: "ArrayAccess"
      }), ", ", _jsx(_components.a, {
        href: "https://www.php.net/manual/en/class.countable.php",
        children: "Countable"
      }), " 을 구현하여 좀 더 효용성을 높였습니다."]
    }), "\n", _jsx(_components.h2, {
      children: "성능 테스트!"
    }), "\n", _jsx(_components.p, {
      children: "이제 구현했으니, 성능을 테스트 해보겠습니다."
    }), "\n", _jsx(_components.p, {
      children: "테스트는 다음과 같이 진행하였습니다."
    }), "\n", _jsxs(_components.ol, {
      children: ["\n", _jsx(_components.li, {
        children: "10000 크기의 고정 배열을 만들어서 랜덤으로 데이터를 넣었을때 메모리 사용량을 체크 하였습니다."
      }), "\n", _jsx(_components.li, {
        children: "100번씩 반복문을 실행하여, 실행 시간의 평균을 체크 하였습니다."
      }), "\n"]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "define('ARRAY_LENGTH', 10000);\n\n$start_memory = memory_get_usage();\n$vanilla = [];\nfor ($i = 0; $i < ARRAY_LENGTH; $i++) {\n    $vanilla[] = mt_rand(0, 255);\n}\n\n$end_memory = memory_get_usage() - $start_memory;\necho \"legacy array memory usage : {$end_memory}\\n\";\n\n$start = microtime(true);\n$result = 0;\nfor ($i = 0; $i < ARRAY_LENGTH; $i++) {\n    $result += $vanilla[$i];\n}\n\n$time_elapsed_secs = microtime(true) - $start;\necho \"for iterator legacy array : {$time_elapsed_secs}\\n\";\n\n$start_memory = memory_get_usage();\n$entries = new \\Monoless\\Arrays\\FixedUnsignedIntegerArray(ARRAY_LENGTH);\nfor ($i = 0; $i < ARRAY_LENGTH; $i++) {\n    $entries[$i] = mt_rand(0, 255);\n}\n\n$end_memory = memory_get_usage() - $start_memory;\necho \"fixed unsigned integer array memory usage : {$end_memory}\\n\";\n\n$time_total = 0;\n$interval = 100;\nfor ($j = 0; $j < $interval; $j++) {\n    $start = microtime(true);\n\n    $result = 0;\n    for ($i = 0; $i < ARRAY_LENGTH; $i++) {\n        $result += $entries[$i];\n    }\n\n    $time_elapsed_secs = microtime(true) - $start;\n    $time_total += $time_elapsed_secs;\n}\n\n$time_average = $time_total / $interval;\necho \"iterator speed average : {$time_average}\\n\";\n"
      })
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "legacy array memory usage : 528440\nfor iterator legacy array : 0.00035810470581055\nfixed unsigned integer array memory usage : 41072\niterator speed average : 0.0068418407440186\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "메모리 사용량은 약 90% 개선이 되었으나 속도는 기존 배열을 이길 수가 없었네요..."
    }), "\n", _jsx(_components.p, {
      children: _jsx(_components.img, {
        src: "https://sayingimages.com/wp-content/uploads/try-again-fail-meme.png",
        alt: "오늘도 망했어요..."
      })
    }), "\n", _jsxs(_components.p, {
      children: ["역시 기존껄 쓰는거 좋은거라고 배우고... 오늘도 맥주와 치킨을 시키며 잡니다.", _jsx(_components.br, {}), "\n", "그래도 제 삽질이 좋다면, ", _jsx(_components.a, {
        href: "https://github.com/q_lazzarus/arrays",
        children: "github"
      }), " 와 이 ", _jsx(_components.a, {
        href: "https://packagist.org/packages/q_lazzarus/arrays",
        children: "패키지"
      }), "를 참고하세요"]
    }), "\n", _jsx(_components.h2, {
      children: "후일담..."
    }), "\n", _jsx(_components.p, {
      children: "혹시나 싶어서 php://memory 에 fwrite / fseek 를 구현해봤는데 더 느렸습니다..."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "for iterator legacy array : 0.0013089179992676\nstring speed average : 0.0084279131889343\nphp://memory speed average : 0.0098107981681824\n"
      })
    }), "\n", _jsx(_components.h3, {
      children: "참조 사이트"
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsx(_components.li, {
        children: _jsx(_components.a, {
          href: "https://www.php.net/manual/en/language.types.array.php",
          children: "https://www.php.net/manual/en/language.types.array.php"
        })
      }), "\n", _jsx(_components.li, {
        children: _jsx(_components.a, {
          href: "https://www.geeksforgeeks.org/array-data-structure/",
          children: "https://www.geeksforgeeks.org/array-data-structure/"
        })
      }), "\n", _jsx(_components.li, {
        children: _jsx(_components.a, {
          href: "https://www.geeksforgeeks.org/c-data-types/",
          children: "https://www.geeksforgeeks.org/c-data-types/"
        })
      }), "\n"]
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = {
    ..._provideComponents(),
    ...props.components
  };
  return MDXLayout ? _jsx(MDXLayout, {
    ...props,
    children: _jsx(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
return {
  default: MDXContent
};
5:[["$","$L12",null,{}],["$","$L13",null,{}],["$","$L14",null,{"title":"php 로 IntegerArray 구현하기","summary":"기본적으로 PHP 의 배열은 일반적인 ArrayList 구현이 아니라, Hash Table 입니다. 그러다보니 php 개발자들은 배열을 배열처럼 쓰지 않고 Hash Table 처럼 이용하는 분들이 많습니다. (나쁜거 아니에요!)","date":"5 years ago","category":"coding"}],["$","$L15",null,{"post":{"slug":"integer-array-php-implementation","title":"php 로 IntegerArray 구현하기","date":"$D2019-11-27T14:52:00.000Z","summary":"기본적으로 PHP 의 배열은 일반적인 ArrayList 구현이 아니라, Hash Table 입니다. 그러다보니 php 개발자들은 배열을 배열처럼 쓰지 않고 Hash Table 처럼 이용하는 분들이 많습니다. (나쁜거 아니에요!)","category":"coding","image":"https://raw.githubusercontent.com/security-checklist/php-security-check-list/master//image/php-image.png","embeddedImagesLocal":"$undefined","tags":["dev","coding","php","iterator","array","integer"],"content":"$16","source":{"compiledSource":"$17","frontmatter":{},"scope":{}},"roadAddress":"$undefined","parcelAddress":"$undefined","lat":"$undefined","lng":"$undefined","viewCount":0}}],["$","$L18",null,{"sx":{"mx":"auto","width":"100%","p":2},"children":[["$","$L19",null,{"sx":{"my":3}}],["$","$L18",null,{"sx":{"mb":3},"children":["$","$L18",null,{"sx":{"mt":1,"display":"flex","flexWrap":"wrap","gap":1},"children":[["$","$L1a","0",{"href":"/tag/dev","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"dev","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","1",{"href":"/tag/coding","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"coding","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","2",{"href":"/tag/php","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"php","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","3",{"href":"/tag/iterator","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"iterator","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","4",{"href":"/tag/array","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"array","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","5",{"href":"/tag/integer","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"integer","sx":{"textTransform":"lowercase"}}]}]]}]}],["$","$L18",null,{"sx":{"display":"flex","justifyContent":"space-between","alignItems":"center","flexWrap":"wrap","gap":1},"children":[["$","$L1c",null,{"component":"$1d","href":"/article/what-is-babel","variant":"outlined","color":"primary","sx":{"textAlign":"left"},"children":["← ","babel 이란 무엇인가?"]}],["$","$L1c",null,{"component":"$1d","href":"/article/flutter-with-mobx","variant":"outlined","color":"primary","sx":{"ml":"auto","textAlign":"right"},"children":["mobx를 이용한 flutter 상태 관리"," →"]}]]}]]}],["$","$L18",null,{"py":2,"mt":4,"component":"footer","children":["$","$L1e",null,{"maxWidth":"lg","sx":{"display":"flex","flexDirection":{"xs":"column","md":"row"},"justifyContent":{"xs":"center","md":"space-between"},"alignItems":"center","gap":2},"children":[["$","$L1f",null,{"variant":"body2","children":["© ","2022-2025"," ","Yeppyshiba Blog",". All rights reserved."]}],["$","$L1f",null,{"variant":"body2","children":["$","$L1d",null,{"href":"https://www.flaticon.com/free-icons/akita-inu","target":"_blank","rel":"noopener noreferrer","title":"akita inu icons","underline":"hover","color":"primary","children":"Akita inu icons created by tulpahn - Flaticon"}]}]]}]}]]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"php 로 IntegerArray 구현하기 - Yeppyshiba Blog"}],["$","meta","2",{"name":"description","content":"기본적으로 PHP 의 배열은 일반적인 ArrayList 구현이 아니라, Hash Table 입니다. 그러다보니 php 개발자들은 배열을 배열처럼 쓰지 않고 Hash Table 처럼 이용하는 분들이 많습니다. (나쁜거 아니에요!)"}],["$","meta","3",{"name":"keywords","content":"dev, coding, php, iterator, array, integer"}],["$","link","4",{"rel":"canonical","href":"/article/integer-array-php-implementation"}],["$","meta","5",{"property":"og:title","content":"php 로 IntegerArray 구현하기"}],["$","meta","6",{"property":"og:description","content":"기본적으로 PHP 의 배열은 일반적인 ArrayList 구현이 아니라, Hash Table 입니다. 그러다보니 php 개발자들은 배열을 배열처럼 쓰지 않고 Hash Table 처럼 이용하는 분들이 많습니다. (나쁜거 아니에요!)"}],["$","meta","7",{"property":"og:url","content":"https://blog.yeppyshiba.com/article/integer-array-php-implementation"}],["$","meta","8",{"property":"og:image","content":"https://raw.githubusercontent.com/security-checklist/php-security-check-list/master//image/php-image.png"}],["$","meta","9",{"property":"og:type","content":"website"}],["$","meta","10",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","11",{"name":"twitter:title","content":"php 로 IntegerArray 구현하기"}],["$","meta","12",{"name":"twitter:description","content":"기본적으로 PHP 의 배열은 일반적인 ArrayList 구현이 아니라, Hash Table 입니다. 그러다보니 php 개발자들은 배열을 배열처럼 쓰지 않고 Hash Table 처럼 이용하는 분들이 많습니다. (나쁜거 아니에요!)"}],["$","meta","13",{"name":"twitter:image","content":"https://raw.githubusercontent.com/security-checklist/php-security-check-list/master//image/php-image.png"}]]
7:null
