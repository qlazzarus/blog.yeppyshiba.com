1:"$Sreact.fragment"
3:I[5244,[],""]
4:I[3866,[],""]
6:I[6213,[],"OutletBoundary"]
8:I[6213,[],"MetadataBoundary"]
a:I[6213,[],"ViewportBoundary"]
c:I[4835,[],""]
:HL["/_next/static/media/47cbc4e2adbc5db9-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/acfb4e572a721580.css","style"]
0:{"P":null,"b":"GMP_58STJf1i37uJRngK1","p":"","c":["","article","chunk-upload-vue-axios-laravel",""],"i":false,"f":[[["",{"children":["article",{"children":[["slug","chunk-upload-vue-axios-laravel","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/acfb4e572a721580.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],"$L2"]}],{"children":["article",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","chunk-upload-vue-axios-laravel","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":"$L7"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","FDrO9GOpmqAzDtP7EVevE",{"children":[["$","$L8",null,{"children":"$L9"}],["$","$La",null,{"children":"$Lb"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
d:I[6269,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"default"]
e:I[4527,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"default"]
f:I[1392,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"default"]
10:I[457,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"default"]
11:I[766,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"GoogleAnalytics"]
2:["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":["$","body",null,{"children":[[["$","script","mui-color-scheme-init",{"suppressHydrationWarning":true,"nonce":"$undefined","dangerouslySetInnerHTML":{"__html":"(function() {\ntry {\n  let colorScheme = '';\n  const mode = localStorage.getItem('mui-mode') || 'system';\n  const dark = localStorage.getItem('mui-color-scheme-dark') || 'dark';\n  const light = localStorage.getItem('mui-color-scheme-light') || 'light';\n  if (mode === 'system') {\n    // handle system mode\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      colorScheme = dark\n    } else {\n      colorScheme = light\n    }\n  }\n  if (mode === 'light') {\n    colorScheme = light;\n  }\n  if (mode === 'dark') {\n    colorScheme = dark;\n  }\n  if (colorScheme) {\n    document.documentElement.classList.remove('%s'.replace('%s', light), '%s'.replace('%s', dark));\n      document.documentElement.classList.add('%s'.replace('%s', colorScheme));document.documentElement.setAttribute('.%s', colorScheme);\n  }\n} catch(e){}})();"}}]],["$","$Ld",null,{"children":["$","$Le",null,{"theme":"$f","defaultMode":"system","children":[["$","$L10",null,{"enableColorScheme":true}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}],["$","$L11",null,{"gaId":"G-P6NE4VJRLC"}]]}]}]
12:I[4933,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-18f19de510d1d53b.js","467","static/chunks/467-8c7bc18aa09eb692.js","234","static/chunks/234-4d7c2d5758e6aea9.js","48","static/chunks/48-228feae1d1feafc8.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-b62baeaa5c1731ae.js"],"default"]
13:I[787,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-18f19de510d1d53b.js","467","static/chunks/467-8c7bc18aa09eb692.js","234","static/chunks/234-4d7c2d5758e6aea9.js","48","static/chunks/48-228feae1d1feafc8.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-b62baeaa5c1731ae.js"],"default"]
14:I[1309,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-18f19de510d1d53b.js","467","static/chunks/467-8c7bc18aa09eb692.js","234","static/chunks/234-4d7c2d5758e6aea9.js","48","static/chunks/48-228feae1d1feafc8.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-b62baeaa5c1731ae.js"],"default"]
15:I[9595,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-18f19de510d1d53b.js","467","static/chunks/467-8c7bc18aa09eb692.js","234","static/chunks/234-4d7c2d5758e6aea9.js","48","static/chunks/48-228feae1d1feafc8.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-b62baeaa5c1731ae.js"],"default"]
18:I[5436,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-18f19de510d1d53b.js","467","static/chunks/467-8c7bc18aa09eb692.js","234","static/chunks/234-4d7c2d5758e6aea9.js","48","static/chunks/48-228feae1d1feafc8.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-b62baeaa5c1731ae.js"],"default"]
19:I[7013,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-18f19de510d1d53b.js","467","static/chunks/467-8c7bc18aa09eb692.js","234","static/chunks/234-4d7c2d5758e6aea9.js","48","static/chunks/48-228feae1d1feafc8.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-b62baeaa5c1731ae.js"],"default"]
1a:I[8173,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-18f19de510d1d53b.js","467","static/chunks/467-8c7bc18aa09eb692.js","234","static/chunks/234-4d7c2d5758e6aea9.js","48","static/chunks/48-228feae1d1feafc8.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-b62baeaa5c1731ae.js"],""]
1b:I[9234,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-18f19de510d1d53b.js","467","static/chunks/467-8c7bc18aa09eb692.js","234","static/chunks/234-4d7c2d5758e6aea9.js","48","static/chunks/48-228feae1d1feafc8.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-b62baeaa5c1731ae.js"],"default"]
1c:I[2282,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-18f19de510d1d53b.js","467","static/chunks/467-8c7bc18aa09eb692.js","234","static/chunks/234-4d7c2d5758e6aea9.js","48","static/chunks/48-228feae1d1feafc8.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-b62baeaa5c1731ae.js"],"default"]
1d:I[6656,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-18f19de510d1d53b.js","467","static/chunks/467-8c7bc18aa09eb692.js","234","static/chunks/234-4d7c2d5758e6aea9.js","48","static/chunks/48-228feae1d1feafc8.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-b62baeaa5c1731ae.js"],"default"]
1e:I[3345,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-18f19de510d1d53b.js","467","static/chunks/467-8c7bc18aa09eb692.js","234","static/chunks/234-4d7c2d5758e6aea9.js","48","static/chunks/48-228feae1d1feafc8.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-b62baeaa5c1731ae.js"],"default"]
1f:I[9561,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-18f19de510d1d53b.js","467","static/chunks/467-8c7bc18aa09eb692.js","234","static/chunks/234-4d7c2d5758e6aea9.js","48","static/chunks/48-228feae1d1feafc8.js","355","static/chunks/355-9f6e8ed93740a9d3.js","225","static/chunks/app/article/%5Bslug%5D/page-b62baeaa5c1731ae.js"],"default"]
16:T218b,
## 들어가며

파일 업로드 구현이야 많이들 해보셨겠지만
용량이 커진다면? 생각보다 신경쓸게 많아집니다.

![어느 세월에 다 올리냐...](https://cdn.pixabay.com/photo/2016/11/23/00/32/apple-1851464_960_720.jpg)

분할 업로드를 구현했을 때 얻을 수 있는 이점들은 생각보다 꽤 많습니다. 가령...<br />

- 낮은 서버 대기 시간
- 느린 클라이언트에게도 축복을
- 또한 멋진 업로드 매니저도 구현이 가능하구요

오늘은 [axios](https://github.com/axios/axios) 라이브러리를 활용하여<br />
[resumablejs](https://github.com/23/resumable.js) 라이브러리 메뉴얼을 참고하여 분할 업로드 기능을 구현해보도록 하겠습니다.

## 원리

원리는 정말 간단합니다. 파일을 그냥 짤라서 서버에 던지고, 서버에서는 파일을 합치면 됩니다.

![참 쉽죠?](https://news.artnet.com/app/news-upload/2019/05/Bob-Ross_1-1024x693.png)

물론 말은 쉽겠지만 코드로 이야기 하겠습니다.

### 백엔드

먼저 이 글의 중점은 프론트엔드이므로, 기존 라이브러리를 활용하도록 하겠습니다.
빠른 진행을 위해서 laravel 을 선택 했습니다.

```shell
composer create-project --prefer-dist laravel/laravel
```

이 라이브러리가 쓸만한거 같더군요.

```shell
composer require pion/laravel-chunk-upload
```

이제 업로드를 처리할 Controller 를 정의합니다.
업로드 진행시 퍼센트를 리턴해주며, 완료시에는 파일 병합 및 이동을 담당하게 됩니다.

```php
class UploadController extends Controller
{
    //
    public function request(Request $request, FileReceiver $receiver)
    {
        if ($receiver->isUploaded() === false) {
            throw new UploadMissingFileException();
        }

        // receive the file
        $save = $receiver->receive();

        // check if the upload has finished (in chunk mode it will send smaller files)
        if ($save->isFinished()) {
            // save the file and return any response you need
            return $this->saveFile($save->getFile());
        }

        $handler = $save->handler();

        return response()->json([
            "done" => $handler->getPercentageDone(),
            "status" => true
        ]);
    }

    /**
     * Saves the file
     *
     * @param UploadedFile $file
     *
     * @return \Illuminate\Http\JsonResponse
     */
    protected function saveFile(UploadedFile $file)
    {
        $fileName = $this->createFilename($file);

        // Group files by the date
        $yearFolder = date('Y');
        $monthFolder = date('m');
        $filePath = "upload/{$yearFolder}/{$monthFolder}/";
        $finalPath = storage_path("app/public/{$filePath}");

        // move the file name
        $file->move($finalPath, $fileName);

        return [
            'path' => Storage::url($filePath . $fileName)
        ];
    }

    /**
     * Create unique filename for uploaded file
     * @param UploadedFile $file
     * @return string
     */
    protected function createFilename(UploadedFile $file)
    {
        return implode([
            time(),
            mt_rand(100, 999),
            '.',
            $file->getClientOriginalExtension()
        ]);
    }
}
```

## 프론트엔드

라라벨이 기본셋으로 vue 를 지원하여 선택하였습니다. (물론 react 도 지원합니다.)<br />
별다른 설정 없이도 hot reload + webpack 을 지원하여 대!단!히! 편합니다.

![아 webpack 아시는구나!](https://i.ytimg.com/vi/PfK5yHZs75I/hqdefault.jpg)

input 태그를 담는 vue component 를 만들어 봅시다.

```html
<input
    type="file"
    class="custom-file-input"
    accept="video/*,audio/*,image/*"
    ref="fileContainer"
    @change="onChangeFile"
/>
```

파일을 첨부하면, data 에 자동으로 등록되게끔 했습니다.

```javascript
	onChangeFile() {
		const file = this.$refs.fileContainer.files;
		this.file = file.length > 0 ? file[0] : null;
	}
```

onsubmit 이벤트 시점에 axios 로 POST 호출하도록 설정하겠습니다.

```javascript
const api = axios.create({
    headers: {
        'Content-type': 'application/x-www-form-urlencoded',
        Accept: 'application/json',
    },
});

const chunkSize = 1024 * 1024;
```

axios 개체를 만들어주고, 한번에 1Mb 씩 업로드하도록 사이즈를 지정했습니다.

```javascript
const start = options.chunkNumber * chunkSize;
const end = Math.min(file.size, start + chunkSize);

let currentChunkSize = chunkSize;
if (options.chunkNumber + 1 === options.blockCount) {
    currentChunkSize = file.size - start;
}

const params = new FormData();
params.append('resumableChunkNumber', options.chunkNumber + 1);
params.append('resumableChunkSize', currentChunkSize);
params.append('resumableCurrentChunkSize', currentChunkSize);
params.append('resumableTotalSize', file.size);
params.append('resumableType', file.type);
params.append('resumableIdentifier', options.identifier);
params.append('resumableFilename', file.name);
params.append('resumableRelativePath', file.name);
params.append('resumableTotalChunks', options.blockCount);
params.append('file', file.slice(start, end), file.name);
```

resumablejs 라이브러리 메뉴얼을 참고하여 FormData 객체를 만들어줍니다.

여기에서 참고할 내용은 chunk 순서에 따라서 파일을 짜르는 것과
FormData 객체에 append 시에 세번째 파라미터를 추가하는 것입니다.
자세한 내용은 [Blob](https://developer.mozilla.org/ko/docs/Web/API/Blob) 과 [FormData](https://developer.mozilla.org/ko/docs/Web/API/FormData) 레퍼런스를 참조하세요.

```javascript
return api
  .post(endpoint, params)
  .then((res) => {
    options.onProgress && options.onProgress(parseInt((end / file.size) * 100, 10), res);
    if (end === file.size) {
      options.onSuccess && options.onSuccess(res);
    } else {
      options.chunkNumber++;
      return chunkUploader(endpoint, file, options);
    }
  })
  .catch((err) => {
    options.onError && options.onError(err);
  });
```

그런 다음 callback event 들을 정의해주기 위한 처리를 합니다.
최초 실행한 이후에 onProgress callback 으로는 현재 진행상태를 공유하고
업로드 완료되면 onSuccess callback 을 실행하게 됩니다.

```javascript
export default {
    chunk: (endpoint, file, onProgress, onError, onSuccess) => {
        const blockCount = Math.ceil(file.size / chunkSize);
        const chunkNumber = 0;
        const identifier = `${file.size}-${file.name.replace('.', '')}`;

        return chunkUploader(endpoint, file, {
            blockCount,
            identifier,
            chunkNumber,
            onProgress,
            onError,
            onSuccess,
        });
    },
};
```

최초 업로드 요청을 처리하기 위한 함수를 정의합니다.
identifier 는 병합할 대상을 구분하기 위한 유니크한 ID 입니다.

```javascript
onSubmit() {
    if (null === this.file) {
        alert('파일을 선택하여 주세요.');
    } else {
        this.progress = 0;
        this.result = null;

        uploadService.chunk(
            '/api/upload',
            this.file,
            // onProgress
            percent => {
                this.progress = percent;
            },
            // onError
            err => {
                alert('에러가 발생하였습니다!');
                console.log(err);
            },
            // onSuccess
            res => {
                const { data } = res;
                this.result = data.path;
            }
        );
    }
}
```

다시 onsubmit 이벤트 처리에서 아까 전에 정의한 메쏘드를 호출 합시다.
(추가로 각 callback event 들을 연결시켜 줍니다.)

이렇게 파일 업로드 매니저가 뿅하고 탄생했습니다.
bootstrap 를 이용해서 예쁘게 꾸며줍시다.
프로그레스바까지 꾸며주었습니다.

![아! 너무 예쁘다...](/images/posts/archive/chunk-uploader-result.png)

## 마치며

예제에 사용된 모든 소스 코드는 [여기](https://github.com/qlazzarus/chunk-upload-axios-vue-laravel) 에서 볼 수 있습니다.
(axios는 너무나 좋은 툴입니다. 모두 쓰세오....)

## 출처 및 참고

- 참 쉽죠? - https://news.artnet.com/exhibitions/bob-ross-museum-debut-1537096
- UnderTale - https://undertale.com/
- resumablejs - http://www.resumablejs.com/
- laravel-chunk-upload - https://github.com/pionl/laravel-chunk-upload
17:T36f7,"use strict";
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = {
    a: "a",
    code: "code",
    h2: "h2",
    h3: "h3",
    img: "img",
    li: "li",
    p: "p",
    pre: "pre",
    ul: "ul",
    ..._provideComponents(),
    ...props.components
  };
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "들어가며"
    }), "\n", _jsx(_components.p, {
      children: "파일 업로드 구현이야 많이들 해보셨겠지만\n용량이 커진다면? 생각보다 신경쓸게 많아집니다."
    }), "\n", _jsx(_components.p, {
      children: _jsx(_components.img, {
        src: "https://cdn.pixabay.com/photo/2016/11/23/00/32/apple-1851464_960_720.jpg",
        alt: "어느 세월에 다 올리냐..."
      })
    }), "\n", _jsxs(_components.p, {
      children: ["분할 업로드를 구현했을 때 얻을 수 있는 이점들은 생각보다 꽤 많습니다. 가령...", _jsx("br", {})]
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsx(_components.li, {
        children: "낮은 서버 대기 시간"
      }), "\n", _jsx(_components.li, {
        children: "느린 클라이언트에게도 축복을"
      }), "\n", _jsx(_components.li, {
        children: "또한 멋진 업로드 매니저도 구현이 가능하구요"
      }), "\n"]
    }), "\n", _jsxs(_components.p, {
      children: ["오늘은 ", _jsx(_components.a, {
        href: "https://github.com/axios/axios",
        children: "axios"
      }), " 라이브러리를 활용하여", _jsx("br", {}), "\n", _jsx(_components.a, {
        href: "https://github.com/23/resumable.js",
        children: "resumablejs"
      }), " 라이브러리 메뉴얼을 참고하여 분할 업로드 기능을 구현해보도록 하겠습니다."]
    }), "\n", _jsx(_components.h2, {
      children: "원리"
    }), "\n", _jsx(_components.p, {
      children: "원리는 정말 간단합니다. 파일을 그냥 짤라서 서버에 던지고, 서버에서는 파일을 합치면 됩니다."
    }), "\n", _jsx(_components.p, {
      children: _jsx(_components.img, {
        src: "https://news.artnet.com/app/news-upload/2019/05/Bob-Ross_1-1024x693.png",
        alt: "참 쉽죠?"
      })
    }), "\n", _jsx(_components.p, {
      children: "물론 말은 쉽겠지만 코드로 이야기 하겠습니다."
    }), "\n", _jsx(_components.h3, {
      children: "백엔드"
    }), "\n", _jsx(_components.p, {
      children: "먼저 이 글의 중점은 프론트엔드이므로, 기존 라이브러리를 활용하도록 하겠습니다.\n빠른 진행을 위해서 laravel 을 선택 했습니다."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-shell",
        children: "composer create-project --prefer-dist laravel/laravel\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "이 라이브러리가 쓸만한거 같더군요."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-shell",
        children: "composer require pion/laravel-chunk-upload\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "이제 업로드를 처리할 Controller 를 정의합니다.\n업로드 진행시 퍼센트를 리턴해주며, 완료시에는 파일 병합 및 이동을 담당하게 됩니다."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "class UploadController extends Controller\n{\n    //\n    public function request(Request $request, FileReceiver $receiver)\n    {\n        if ($receiver->isUploaded() === false) {\n            throw new UploadMissingFileException();\n        }\n\n        // receive the file\n        $save = $receiver->receive();\n\n        // check if the upload has finished (in chunk mode it will send smaller files)\n        if ($save->isFinished()) {\n            // save the file and return any response you need\n            return $this->saveFile($save->getFile());\n        }\n\n        $handler = $save->handler();\n\n        return response()->json([\n            \"done\" => $handler->getPercentageDone(),\n            \"status\" => true\n        ]);\n    }\n\n    /**\n     * Saves the file\n     *\n     * @param UploadedFile $file\n     *\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    protected function saveFile(UploadedFile $file)\n    {\n        $fileName = $this->createFilename($file);\n\n        // Group files by the date\n        $yearFolder = date('Y');\n        $monthFolder = date('m');\n        $filePath = \"upload/{$yearFolder}/{$monthFolder}/\";\n        $finalPath = storage_path(\"app/public/{$filePath}\");\n\n        // move the file name\n        $file->move($finalPath, $fileName);\n\n        return [\n            'path' => Storage::url($filePath . $fileName)\n        ];\n    }\n\n    /**\n     * Create unique filename for uploaded file\n     * @param UploadedFile $file\n     * @return string\n     */\n    protected function createFilename(UploadedFile $file)\n    {\n        return implode([\n            time(),\n            mt_rand(100, 999),\n            '.',\n            $file->getClientOriginalExtension()\n        ]);\n    }\n}\n"
      })
    }), "\n", _jsx(_components.h2, {
      children: "프론트엔드"
    }), "\n", _jsxs(_components.p, {
      children: ["라라벨이 기본셋으로 vue 를 지원하여 선택하였습니다. (물론 react 도 지원합니다.)", _jsx("br", {}), "\n별다른 설정 없이도 hot reload + webpack 을 지원하여 대!단!히! 편합니다."]
    }), "\n", _jsx(_components.p, {
      children: _jsx(_components.img, {
        src: "https://i.ytimg.com/vi/PfK5yHZs75I/hqdefault.jpg",
        alt: "아 webpack 아시는구나!"
      })
    }), "\n", _jsx(_components.p, {
      children: "input 태그를 담는 vue component 를 만들어 봅시다."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-html",
        children: "<input\n    type=\"file\"\n    class=\"custom-file-input\"\n    accept=\"video/*,audio/*,image/*\"\n    ref=\"fileContainer\"\n    @change=\"onChangeFile\"\n/>\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "파일을 첨부하면, data 에 자동으로 등록되게끔 했습니다."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-javascript",
        children: "\tonChangeFile() {\n\t\tconst file = this.$refs.fileContainer.files;\n\t\tthis.file = file.length > 0 ? file[0] : null;\n\t}\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "onsubmit 이벤트 시점에 axios 로 POST 호출하도록 설정하겠습니다."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-javascript",
        children: "const api = axios.create({\n    headers: {\n        'Content-type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n    },\n});\n\nconst chunkSize = 1024 * 1024;\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "axios 개체를 만들어주고, 한번에 1Mb 씩 업로드하도록 사이즈를 지정했습니다."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-javascript",
        children: "const start = options.chunkNumber * chunkSize;\nconst end = Math.min(file.size, start + chunkSize);\n\nlet currentChunkSize = chunkSize;\nif (options.chunkNumber + 1 === options.blockCount) {\n    currentChunkSize = file.size - start;\n}\n\nconst params = new FormData();\nparams.append('resumableChunkNumber', options.chunkNumber + 1);\nparams.append('resumableChunkSize', currentChunkSize);\nparams.append('resumableCurrentChunkSize', currentChunkSize);\nparams.append('resumableTotalSize', file.size);\nparams.append('resumableType', file.type);\nparams.append('resumableIdentifier', options.identifier);\nparams.append('resumableFilename', file.name);\nparams.append('resumableRelativePath', file.name);\nparams.append('resumableTotalChunks', options.blockCount);\nparams.append('file', file.slice(start, end), file.name);\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "resumablejs 라이브러리 메뉴얼을 참고하여 FormData 객체를 만들어줍니다."
    }), "\n", _jsxs(_components.p, {
      children: ["여기에서 참고할 내용은 chunk 순서에 따라서 파일을 짜르는 것과\nFormData 객체에 append 시에 세번째 파라미터를 추가하는 것입니다.\n자세한 내용은 ", _jsx(_components.a, {
        href: "https://developer.mozilla.org/ko/docs/Web/API/Blob",
        children: "Blob"
      }), " 과 ", _jsx(_components.a, {
        href: "https://developer.mozilla.org/ko/docs/Web/API/FormData",
        children: "FormData"
      }), " 레퍼런스를 참조하세요."]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-javascript",
        children: "return api\n  .post(endpoint, params)\n  .then((res) => {\n    options.onProgress && options.onProgress(parseInt((end / file.size) * 100, 10), res);\n    if (end === file.size) {\n      options.onSuccess && options.onSuccess(res);\n    } else {\n      options.chunkNumber++;\n      return chunkUploader(endpoint, file, options);\n    }\n  })\n  .catch((err) => {\n    options.onError && options.onError(err);\n  });\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "그런 다음 callback event 들을 정의해주기 위한 처리를 합니다.\n최초 실행한 이후에 onProgress callback 으로는 현재 진행상태를 공유하고\n업로드 완료되면 onSuccess callback 을 실행하게 됩니다."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-javascript",
        children: "export default {\n    chunk: (endpoint, file, onProgress, onError, onSuccess) => {\n        const blockCount = Math.ceil(file.size / chunkSize);\n        const chunkNumber = 0;\n        const identifier = `${file.size}-${file.name.replace('.', '')}`;\n\n        return chunkUploader(endpoint, file, {\n            blockCount,\n            identifier,\n            chunkNumber,\n            onProgress,\n            onError,\n            onSuccess,\n        });\n    },\n};\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "최초 업로드 요청을 처리하기 위한 함수를 정의합니다.\nidentifier 는 병합할 대상을 구분하기 위한 유니크한 ID 입니다."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-javascript",
        children: "onSubmit() {\n    if (null === this.file) {\n        alert('파일을 선택하여 주세요.');\n    } else {\n        this.progress = 0;\n        this.result = null;\n\n        uploadService.chunk(\n            '/api/upload',\n            this.file,\n            // onProgress\n            percent => {\n                this.progress = percent;\n            },\n            // onError\n            err => {\n                alert('에러가 발생하였습니다!');\n                console.log(err);\n            },\n            // onSuccess\n            res => {\n                const { data } = res;\n                this.result = data.path;\n            }\n        );\n    }\n}\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "다시 onsubmit 이벤트 처리에서 아까 전에 정의한 메쏘드를 호출 합시다.\n(추가로 각 callback event 들을 연결시켜 줍니다.)"
    }), "\n", _jsx(_components.p, {
      children: "이렇게 파일 업로드 매니저가 뿅하고 탄생했습니다.\nbootstrap 를 이용해서 예쁘게 꾸며줍시다.\n프로그레스바까지 꾸며주었습니다."
    }), "\n", _jsx(_components.p, {
      children: _jsx(_components.img, {
        src: "/images/posts/archive/chunk-uploader-result.png",
        alt: "아! 너무 예쁘다..."
      })
    }), "\n", _jsx(_components.h2, {
      children: "마치며"
    }), "\n", _jsxs(_components.p, {
      children: ["예제에 사용된 모든 소스 코드는 ", _jsx(_components.a, {
        href: "https://github.com/qlazzarus/chunk-upload-axios-vue-laravel",
        children: "여기"
      }), " 에서 볼 수 있습니다.\n(axios는 너무나 좋은 툴입니다. 모두 쓰세오....)"]
    }), "\n", _jsx(_components.h2, {
      children: "출처 및 참고"
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsxs(_components.li, {
        children: ["참 쉽죠? - ", _jsx(_components.a, {
          href: "https://news.artnet.com/exhibitions/bob-ross-museum-debut-1537096",
          children: "https://news.artnet.com/exhibitions/bob-ross-museum-debut-1537096"
        })]
      }), "\n", _jsxs(_components.li, {
        children: ["UnderTale - ", _jsx(_components.a, {
          href: "https://undertale.com/",
          children: "https://undertale.com/"
        })]
      }), "\n", _jsxs(_components.li, {
        children: ["resumablejs - ", _jsx(_components.a, {
          href: "http://www.resumablejs.com/",
          children: "http://www.resumablejs.com/"
        })]
      }), "\n", _jsxs(_components.li, {
        children: ["laravel-chunk-upload - ", _jsx(_components.a, {
          href: "https://github.com/pionl/laravel-chunk-upload",
          children: "https://github.com/pionl/laravel-chunk-upload"
        })]
      }), "\n"]
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = {
    ..._provideComponents(),
    ...props.components
  };
  return MDXLayout ? _jsx(MDXLayout, {
    ...props,
    children: _jsx(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
return {
  default: MDXContent
};
5:[["$","$L12",null,{}],["$","$L13",null,{}],["$","$L14",null,{"title":"axios와 vue를 이용한 분할 업로드","summary":"파일 업로드 구현이야 많이들 해보셨겠지만 용량이 커진다면? 생각보다 신경쓸게 많아집니다.","date":"6 years ago","category":"coding"}],["$","$L15",null,{"post":{"slug":"chunk-upload-vue-axios-laravel","title":"axios와 vue를 이용한 분할 업로드","date":"$D2019-06-20T01:00:00.000Z","summary":"파일 업로드 구현이야 많이들 해보셨겠지만 용량이 커진다면? 생각보다 신경쓸게 많아집니다.","category":"coding","image":"https://icon-library.com/images/icon-uploader/icon-uploader-2.jpg","embeddedImagesLocal":"$undefined","tags":["dev","coding","chunk upload","axios","vue","laravel","php","javascript"],"content":"$16","source":{"compiledSource":"$17","frontmatter":{},"scope":{}},"roadAddress":"$undefined","parcelAddress":"$undefined","lat":"$undefined","lng":"$undefined","viewCount":44}}],["$","$L18",null,{"maxWidth":"lg","sx":{"mx":"auto","width":"100%","p":2},"children":[["$","$L19",null,{"sx":{"my":3}}],["$","$L18",null,{"sx":{"mb":3},"children":["$","$L18",null,{"sx":{"mt":1,"display":"flex","flexWrap":"wrap","gap":1},"children":[["$","$L1a","0",{"href":"/tag/dev","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"dev","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","1",{"href":"/tag/coding","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"coding","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","2",{"href":"/tag/chunk-upload","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"chunk upload","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","3",{"href":"/tag/axios","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"axios","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","4",{"href":"/tag/vue","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"vue","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","5",{"href":"/tag/laravel","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"laravel","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","6",{"href":"/tag/php","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"php","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","7",{"href":"/tag/javascript","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"javascript","sx":{"textTransform":"lowercase"}}]}]]}]}],["$","$L18",null,{"sx":{"display":"flex","justifyContent":"space-between","alignItems":"center","flexWrap":"wrap","gap":1},"children":[["$","$L1c",null,{"component":"$1d","href":"/article/flutter-with-mobx","variant":"outlined","color":"primary","sx":{"textAlign":"left"},"children":["← ","mobx를 이용한 flutter 상태 관리"]}],["$","$L18",null,{}]]}]]}],["$","$L18",null,{"py":2,"mt":4,"component":"footer","children":["$","$L1e",null,{"maxWidth":"lg","sx":{"display":"flex","flexDirection":{"xs":"column","md":"row"},"justifyContent":{"xs":"center","md":"space-between"},"alignItems":"center","gap":2},"children":[["$","$L1f",null,{"variant":"body2","children":["© ","2022-2025"," ","Yeppyshiba Blog",". All rights reserved."]}],["$","$L1f",null,{"variant":"body2","children":["$","$L1d",null,{"href":"https://www.flaticon.com/free-icons/akita-inu","target":"_blank","rel":"noopener noreferrer","title":"akita inu icons","underline":"hover","color":"primary","children":"Akita inu icons created by tulpahn - Flaticon"}]}]]}]}]]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"axios와 vue를 이용한 분할 업로드 - Yeppyshiba Blog"}],["$","meta","2",{"name":"description","content":"파일 업로드 구현이야 많이들 해보셨겠지만 용량이 커진다면? 생각보다 신경쓸게 많아집니다."}],["$","meta","3",{"name":"keywords","content":"dev, coding, chunk upload, axios, vue, laravel, php, javascript"}],["$","link","4",{"rel":"canonical","href":"/article/chunk-upload-vue-axios-laravel"}],["$","meta","5",{"property":"og:title","content":"axios와 vue를 이용한 분할 업로드"}],["$","meta","6",{"property":"og:description","content":"파일 업로드 구현이야 많이들 해보셨겠지만 용량이 커진다면? 생각보다 신경쓸게 많아집니다."}],["$","meta","7",{"property":"og:url","content":"https://blog.yeppyshiba.com/article/chunk-upload-vue-axios-laravel/"}],["$","meta","8",{"property":"og:image","content":"https://icon-library.com/images/icon-uploader/icon-uploader-2.jpg"}],["$","meta","9",{"property":"og:type","content":"website"}],["$","meta","10",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","11",{"name":"twitter:title","content":"axios와 vue를 이용한 분할 업로드"}],["$","meta","12",{"name":"twitter:description","content":"파일 업로드 구현이야 많이들 해보셨겠지만 용량이 커진다면? 생각보다 신경쓸게 많아집니다."}],["$","meta","13",{"name":"twitter:image","content":"https://icon-library.com/images/icon-uploader/icon-uploader-2.jpg"}],["$","link","14",{"rel":"icon","href":"/images/akita-inu.png"}]]
7:null
