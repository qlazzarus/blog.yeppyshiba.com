1:"$Sreact.fragment"
3:I[5244,[],""]
4:I[3866,[],""]
6:I[6213,[],"OutletBoundary"]
8:I[6213,[],"MetadataBoundary"]
a:I[6213,[],"ViewportBoundary"]
c:I[4835,[],""]
:HL["/_next/static/media/47cbc4e2adbc5db9-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/acfb4e572a721580.css","style"]
0:{"P":null,"b":"Jl88Famfs95YhzgFMBli3","p":"","c":["","article","php8-attributes"],"i":false,"f":[[["",{"children":["article",{"children":[["slug","php8-attributes","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/acfb4e572a721580.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],"$L2"]}],{"children":["article",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","php8-attributes","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":"$L7"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","PHPXYRdNmFSMlmXmF7qnx",{"children":[["$","$L8",null,{"children":"$L9"}],["$","$La",null,{"children":"$Lb"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
d:I[6269,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"default"]
e:I[4527,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"default"]
f:I[1392,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"default"]
10:I[457,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"default"]
11:I[766,["967","static/chunks/967-1bc8bd5ae145cc41.js","33","static/chunks/33-b54d5da5beda4fc8.js","177","static/chunks/app/layout-11cb33ab0676062e.js"],"GoogleAnalytics"]
2:["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":["$","body",null,{"children":[[["$","script","mui-color-scheme-init",{"suppressHydrationWarning":true,"nonce":"$undefined","dangerouslySetInnerHTML":{"__html":"(function() {\ntry {\n  let colorScheme = '';\n  const mode = localStorage.getItem('mui-mode') || 'system';\n  const dark = localStorage.getItem('mui-color-scheme-dark') || 'dark';\n  const light = localStorage.getItem('mui-color-scheme-light') || 'light';\n  if (mode === 'system') {\n    // handle system mode\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      colorScheme = dark\n    } else {\n      colorScheme = light\n    }\n  }\n  if (mode === 'light') {\n    colorScheme = light;\n  }\n  if (mode === 'dark') {\n    colorScheme = dark;\n  }\n  if (colorScheme) {\n    document.documentElement.classList.remove('%s'.replace('%s', light), '%s'.replace('%s', dark));\n      document.documentElement.classList.add('%s'.replace('%s', colorScheme));document.documentElement.setAttribute('.%s', colorScheme);\n  }\n} catch(e){}})();"}}]],["$","$Ld",null,{"children":["$","$Le",null,{"theme":"$f","defaultMode":"system","children":[["$","$L10",null,{"enableColorScheme":true}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}],["$","$L11",null,{"gaId":"314819162"}]]}]}]
12:I[4933,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
13:I[787,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
14:I[1309,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
15:I[9595,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
18:I[5436,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
19:I[7013,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
1a:I[8173,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],""]
1b:I[9234,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
1c:I[2282,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
1d:I[6656,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
1e:I[3345,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
1f:I[9561,["967","static/chunks/967-1bc8bd5ae145cc41.js","337","static/chunks/337-5cd165e00835bfdf.js","86","static/chunks/86-665701a16d36e939.js","234","static/chunks/234-4d7c2d5758e6aea9.js","467","static/chunks/467-6abad856c7981537.js","355","static/chunks/355-24198bc932a5be22.js","225","static/chunks/app/article/%5Bslug%5D/page-c99a75e9947ecc36.js"],"default"]
16:T24ac,
## php8 에 도입되는 attributes
php 8 부터는 attrubutes 라는 기능을 사용할 수 있습니다. 다른 많은 언어에서는 annontation 이라고 불리는 것이죠.

(이미 php8 소개하는 많은 블로그들이 있었서 늦은감이 있네요...)

일단 여기서는 어떻게 사용하는지, 또 어떻게 커스텀 attributes 를 만드는지 등에 대해서 다뤄 보겠습니다.

## 개요
먼저 attribute 가 작성된 예제를 올려봅니다.

```php
use \Support\Attributes\ListensTo;

class ProductSubscriber
{
    #[ListensTo(ProductCreated::class)]
    public function onProductCreated(ProductCreated $event) { /* … */ }

    #[ListensTo(ProductDeleted::class)]
    public function onProductDeleted(ProductDeleted $event) { /* … */ }
}
```

뒷부분에 실제 사용하는 다른 코드를 보여드리겠습니다만. 이 코드가 attirbutes 를 가장 설명하기 좋은 예라고 생각합니다.

이 문법이 여러분들이 기대했던 것이 아닐 수도 있습니다. 보통 @ 혹은 @: /* */  같은 주석을 선호할 수 도 있습니다. 사실 이런 문법에 대한 논쟁들은 php rfc 에 대한 토론을 읽어보길 권장 드립니다. [PHP RFC: Shorter Attribute Syntax](https://externals.io/message/110640)

일단 코드에 집중 하도록 하겠습니다. 저 **ListensTo** 는 어떻게 작동할가요?

이제 보여 드릴 custom attributes 는 **#[Attributes]** 라는 attribute 가 선언된 간단한 클래스 입니다. 이 기본 attribute 는 원래 PhpAttribute 라고 RFC 에서 결정하였지만, 나중에 다른 토론을 통해 변경 되었습니다.  [PHP RFC: Attribute Amendments](https://wiki.php.net/rfc/attribute_amendments)

custom attribute 는 다음과 같이 작성됩니다.

```php
#[Attribute]
class ListensTo
{
    public string $event;

    public function __construct(string $event)
    {
        $this->event = $event;
    }
}
```

간단하죠? custom attribute 를 작성하신다면 목표를 한정해서 작성하세요. attribute 는 클래스와 메소드에 메타데이터를 추가하기 위한 것이며, 그 이상은 아닙니다.

예를 들어 parameter 입력 유효성 검사에 사용할 수 없습니다.

즉 attribute 내에서 메소드에 전달된 parameter 에는 접근할 수 없습니다.

원래는 이 동작을 허용하는 이전 RFC 가 있었지만 이후 논의를 통해 제외 되었습니다.

아까 event subscriber 예제를 다시 보자면, 여전히 meta data 를 읽고 어딘가의 subscriber 들에게 전달하여야 합니다. 

좀 더 내용을 추가하기 위해, 지루한 boilerplate 코드를 몇개 작성해봅시다.

```php
class EventServiceProvider extends ServiceProvider
{
    // In real life scenarios, 
    //  we'd automatically resolve and cache all subscribers
    //  instead of using a manual array.
    private array $subscribers = [
        ProductSubscriber::class,
    ];

    public function register(): void
    {
        // The event dispatcher is resolved from the container
        $eventDispatcher = $this->app->make(EventDispatcher::class);

        foreach ($this->subscribers as $subscriber) {
            // We'll resolve all listeners registered 
            //  in the subscriber class,
            //  and add them to the dispatcher.
            foreach (
                $this->resolveListeners($subscriber) 
                as [$event, $listener]
            ) {
                $eventDispatcher->listen($event, $listener);
            }       
        }       
    }
}
```

**[$event, $listener]** 문법이 친숙하지 않을 수 있겠지만, 코드 생산성을 높이기 문법입니다. (배열 구조 분해 / ES6 를 생각해보세요!)

이제 resolveListeners 를 한번 보실까요!

```php
private function resolveListeners(string $subscriberClass): array
{
    $reflectionClass = new ReflectionClass($subscriberClass);

    $listeners = [];

    foreach ($reflectionClass->getMethods() as $method) {
        $attributes = $method->getAttributes(ListensTo::class);
        
        foreach ($attributes as $attribute) {
            $listener = $attribute->newInstance();
            
            $listeners[] = [
                // The event that's configured on the attribute
                $listener->event,
    
                // The listener for this event 
                [$subscriberClass, $method->getName()],
            ];
        }
    }

    return $listeners;
}
```

**ReflectionMethod::getAttributes()** 를 통해 주석 문자열을 parsing 하는 것보다 메타 데이터를 쉽게 읽을 수 있는 것을 확인할 수 있습니다. 

> 역주 : php 8 이전에는 annotation 을 문법적으로 지원하지 못해, php 소스코드의 주석을 string 으로 parsing 해서 구현하였습니다. ㅎㄷㄷ [ReflectionProperty::getDocComment](https://www.php.net/manual/en/reflectionproperty.getdoccomment)

좀 어려운 포인트가 두가지 있는데요, 한번 정리해보겠습니다.

먼저 **$attribute->newInstance()** 호출이 있습니다. 이 코드는 실제로 우리가 작성한 custom attribute 를 인스턴스화되는 장소입니다. 우리가 작성한 subscriber 클래스의 attribute 에 나열된 매개 변수를 사용하여 생성자에 전달합니다.

즉, 기술적으로는 custom attribute 에 매개 변수를 전달할 필요가 없습니다. 물론 **$attribute->getArguments()** 를 직접 호출할 수 있습니다. 또한 클래스를 인스턴스화한다는 것은 원하는 방식으로 구문 분석 입력을 생성할 수 있다는 것을 의미합니다. 대체로 **newInstance()**를 사용하여 속성을 인스턴스화하는 것이 좋습니다.

두번째로 **ReflectionMethod::getAttributes()** 를 이용한 메쏘드의 모든 attributes 를 반환하는 함수의 사용입니다. 두가지 parameter 를 사용하여 반환값 필터링할 수 있습니다. 자세한건 아래 문서를 확인해주세요. [ReflectionFunctionAbstract::getAttributes](https://www.php.net/manual/en/reflectionfunctionabstract.getattributes.php)

이 필터링을 이해하려면 먼저 attributes 에 대해서 알아야 할 것이 한 가지 더 있습니다. method 뿐만 아니라 class, property 또는 constant에 여러 attribute 을 추가할 수 있다는 것입니다.

아래는 class 에 선언된 예제입니다.

```php
#[Route(Http::POST, '/products/create'), Autowire,]
class ProductsCreateController
{
    public function __invoke() { /* … */ }
}
```

이를 염두에 두시고 **Reflection::getAttributes()** 가 배열을 반환하는 이유가 명확하므로 결과를 필터링하는 방법을 살펴보겠습니다.

여기에서는 controller 의 route 를 parsing 하는것에 촛점을 맞추고
Route attribute 에 대해서만 관심을 가지도록 하겠습니다. 해당 클래스를 필터로 쉽게 전달 할 수 있습니다.

```php
$attributes = $reflectionClass->getAttributes(Route::class);
```

두번째 parameter는 필터링이 수행되는 방식을 변경합니다. 지정된 인터페이스를 구현하는 모든 속성을 반환하도록 하는  ReflectionAttribute::IS_INSTANCEOF 를 전달할 수 있습니다.

예를 들어 여러 attribute 에 의존하는 컨테이너 정의를 구문을 parsing 한다고 가정한다면...

```php
$attributes = $reflectionClass->getAttributes(
    ContainerAttribute::class, 
    ReflectionAttribute::IS_INSTANCEOF
);
```

좀 더 풀어서 쉽게 설명드리자면... class 아래의 모든 하위 method, property, constants 의 attribute 를 가져올때 선언하면 됩니다.

```php
$r_atts = $rc->getAttributes(SomeAttribute::class, 0); // 0 is default, just given class
echo json_encode(array_map(fn(ReflectionAttribute $r_att) => $r_att->getName(), $r_atts)), PHP_EOL;

$r_atts = $rc->getAttributes(SomeAttribute::class, 2); // given class and children classes
echo json_encode(array_map(fn(ReflectionAttribute $r_att) => $r_att->getName(), $r_atts)), PHP_EOL;
```

## Real World

그렇다면 실제 활용할 수 있는 예제는 무엇일까요?

laravel 을 예를 들면, php7 까지의 laravel 에서 route 를 등록하기 위해 route 에 대한 설정값이 존재하였습니다. [라우팅](https://laravel.kr/docs/8.x/routing)

routes 라는 디렉토리의 web.php / api.php 에 연결할 컨트롤러를 등록하는 형식이었죠.
아래와 같이요.

```php
Route::get('user/profile', [UserProfileController::class, 'show'])->name('profile');
```

하지만 php attributes 에 대한 도입으로 이런 설정 파일을 따로 작성할 필요가 없어졌습니다. [laravel-route-attributes](https://github.com/spatie/laravel-route-attributes)

```php
use Spatie\RouteAttributes\Attributes\Get;

class UserProfileController
{
    #[Get('user/profile')]
    public function show()
    {

    }
}
```

설정 파일을 통하지 않고, 컨트롤러에 attribute 작성하는 것 만으로도 충분하게 되었죠.

이상입니다.

Ref.
* [PHP 8: Attributes](https://stitcher.io/blog/attributes-in-php-8)
* [laravel-route-attributes](https://github.com/spatie/laravel-route-attributes)
* [PHP: PHP 8 기능 정리 및 요약 - 개발자 정상우](https://pronist.tistory.com/60)
* [PHP 소식 - Attribute](https://velog.io/@qroffle/PHP-%EC%86%8C%EC%8B%9D-Attribute)17:T3b7f,"use strict";
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = {
    a: "a",
    blockquote: "blockquote",
    code: "code",
    h2: "h2",
    li: "li",
    p: "p",
    pre: "pre",
    strong: "strong",
    ul: "ul",
    ..._provideComponents(),
    ...props.components
  };
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "php8 에 도입되는 attributes"
    }), "\n", _jsx(_components.p, {
      children: "php 8 부터는 attrubutes 라는 기능을 사용할 수 있습니다. 다른 많은 언어에서는 annontation 이라고 불리는 것이죠."
    }), "\n", _jsx(_components.p, {
      children: "(이미 php8 소개하는 많은 블로그들이 있었서 늦은감이 있네요...)"
    }), "\n", _jsx(_components.p, {
      children: "일단 여기서는 어떻게 사용하는지, 또 어떻게 커스텀 attributes 를 만드는지 등에 대해서 다뤄 보겠습니다."
    }), "\n", _jsx(_components.h2, {
      children: "개요"
    }), "\n", _jsx(_components.p, {
      children: "먼저 attribute 가 작성된 예제를 올려봅니다."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "use \\Support\\Attributes\\ListensTo;\n\nclass ProductSubscriber\n{\n    #[ListensTo(ProductCreated::class)]\n    public function onProductCreated(ProductCreated $event) { /* … */ }\n\n    #[ListensTo(ProductDeleted::class)]\n    public function onProductDeleted(ProductDeleted $event) { /* … */ }\n}\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "뒷부분에 실제 사용하는 다른 코드를 보여드리겠습니다만. 이 코드가 attirbutes 를 가장 설명하기 좋은 예라고 생각합니다."
    }), "\n", _jsxs(_components.p, {
      children: ["이 문법이 여러분들이 기대했던 것이 아닐 수도 있습니다. 보통 @ 혹은 @: /* */  같은 주석을 선호할 수 도 있습니다. 사실 이런 문법에 대한 논쟁들은 php rfc 에 대한 토론을 읽어보길 권장 드립니다. ", _jsx(_components.a, {
        href: "https://externals.io/message/110640",
        children: "PHP RFC: Shorter Attribute Syntax"
      })]
    }), "\n", _jsxs(_components.p, {
      children: ["일단 코드에 집중 하도록 하겠습니다. 저 ", _jsx(_components.strong, {
        children: "ListensTo"
      }), " 는 어떻게 작동할가요?"]
    }), "\n", _jsxs(_components.p, {
      children: ["이제 보여 드릴 custom attributes 는 ", _jsx(_components.strong, {
        children: "#[Attributes]"
      }), " 라는 attribute 가 선언된 간단한 클래스 입니다. 이 기본 attribute 는 원래 PhpAttribute 라고 RFC 에서 결정하였지만, 나중에 다른 토론을 통해 변경 되었습니다.  ", _jsx(_components.a, {
        href: "https://wiki.php.net/rfc/attribute_amendments",
        children: "PHP RFC: Attribute Amendments"
      })]
    }), "\n", _jsx(_components.p, {
      children: "custom attribute 는 다음과 같이 작성됩니다."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "#[Attribute]\nclass ListensTo\n{\n    public string $event;\n\n    public function __construct(string $event)\n    {\n        $this->event = $event;\n    }\n}\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "간단하죠? custom attribute 를 작성하신다면 목표를 한정해서 작성하세요. attribute 는 클래스와 메소드에 메타데이터를 추가하기 위한 것이며, 그 이상은 아닙니다."
    }), "\n", _jsx(_components.p, {
      children: "예를 들어 parameter 입력 유효성 검사에 사용할 수 없습니다."
    }), "\n", _jsx(_components.p, {
      children: "즉 attribute 내에서 메소드에 전달된 parameter 에는 접근할 수 없습니다."
    }), "\n", _jsx(_components.p, {
      children: "원래는 이 동작을 허용하는 이전 RFC 가 있었지만 이후 논의를 통해 제외 되었습니다."
    }), "\n", _jsx(_components.p, {
      children: "아까 event subscriber 예제를 다시 보자면, 여전히 meta data 를 읽고 어딘가의 subscriber 들에게 전달하여야 합니다."
    }), "\n", _jsx(_components.p, {
      children: "좀 더 내용을 추가하기 위해, 지루한 boilerplate 코드를 몇개 작성해봅시다."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "class EventServiceProvider extends ServiceProvider\n{\n    // In real life scenarios, \n    //  we'd automatically resolve and cache all subscribers\n    //  instead of using a manual array.\n    private array $subscribers = [\n        ProductSubscriber::class,\n    ];\n\n    public function register(): void\n    {\n        // The event dispatcher is resolved from the container\n        $eventDispatcher = $this->app->make(EventDispatcher::class);\n\n        foreach ($this->subscribers as $subscriber) {\n            // We'll resolve all listeners registered \n            //  in the subscriber class,\n            //  and add them to the dispatcher.\n            foreach (\n                $this->resolveListeners($subscriber) \n                as [$event, $listener]\n            ) {\n                $eventDispatcher->listen($event, $listener);\n            }       \n        }       \n    }\n}\n"
      })
    }), "\n", _jsxs(_components.p, {
      children: [_jsx(_components.strong, {
        children: "[$event, $listener]"
      }), " 문법이 친숙하지 않을 수 있겠지만, 코드 생산성을 높이기 문법입니다. (배열 구조 분해 / ES6 를 생각해보세요!)"]
    }), "\n", _jsx(_components.p, {
      children: "이제 resolveListeners 를 한번 보실까요!"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "private function resolveListeners(string $subscriberClass): array\n{\n    $reflectionClass = new ReflectionClass($subscriberClass);\n\n    $listeners = [];\n\n    foreach ($reflectionClass->getMethods() as $method) {\n        $attributes = $method->getAttributes(ListensTo::class);\n        \n        foreach ($attributes as $attribute) {\n            $listener = $attribute->newInstance();\n            \n            $listeners[] = [\n                // The event that's configured on the attribute\n                $listener->event,\n    \n                // The listener for this event \n                [$subscriberClass, $method->getName()],\n            ];\n        }\n    }\n\n    return $listeners;\n}\n"
      })
    }), "\n", _jsxs(_components.p, {
      children: [_jsx(_components.strong, {
        children: "ReflectionMethod::getAttributes()"
      }), " 를 통해 주석 문자열을 parsing 하는 것보다 메타 데이터를 쉽게 읽을 수 있는 것을 확인할 수 있습니다."]
    }), "\n", _jsxs(_components.blockquote, {
      children: ["\n", _jsxs(_components.p, {
        children: ["역주 : php 8 이전에는 annotation 을 문법적으로 지원하지 못해, php 소스코드의 주석을 string 으로 parsing 해서 구현하였습니다. ㅎㄷㄷ ", _jsx(_components.a, {
          href: "https://www.php.net/manual/en/reflectionproperty.getdoccomment",
          children: "ReflectionProperty::getDocComment"
        })]
      }), "\n"]
    }), "\n", _jsx(_components.p, {
      children: "좀 어려운 포인트가 두가지 있는데요, 한번 정리해보겠습니다."
    }), "\n", _jsxs(_components.p, {
      children: ["먼저 ", _jsx(_components.strong, {
        children: "$attribute->newInstance()"
      }), " 호출이 있습니다. 이 코드는 실제로 우리가 작성한 custom attribute 를 인스턴스화되는 장소입니다. 우리가 작성한 subscriber 클래스의 attribute 에 나열된 매개 변수를 사용하여 생성자에 전달합니다."]
    }), "\n", _jsxs(_components.p, {
      children: ["즉, 기술적으로는 custom attribute 에 매개 변수를 전달할 필요가 없습니다. 물론 ", _jsx(_components.strong, {
        children: "$attribute->getArguments()"
      }), " 를 직접 호출할 수 있습니다. 또한 클래스를 인스턴스화한다는 것은 원하는 방식으로 구문 분석 입력을 생성할 수 있다는 것을 의미합니다. 대체로 **newInstance()**를 사용하여 속성을 인스턴스화하는 것이 좋습니다."]
    }), "\n", _jsxs(_components.p, {
      children: ["두번째로 ", _jsx(_components.strong, {
        children: "ReflectionMethod::getAttributes()"
      }), " 를 이용한 메쏘드의 모든 attributes 를 반환하는 함수의 사용입니다. 두가지 parameter 를 사용하여 반환값 필터링할 수 있습니다. 자세한건 아래 문서를 확인해주세요. ", _jsx(_components.a, {
        href: "https://www.php.net/manual/en/reflectionfunctionabstract.getattributes.php",
        children: "ReflectionFunctionAbstract::getAttributes"
      })]
    }), "\n", _jsx(_components.p, {
      children: "이 필터링을 이해하려면 먼저 attributes 에 대해서 알아야 할 것이 한 가지 더 있습니다. method 뿐만 아니라 class, property 또는 constant에 여러 attribute 을 추가할 수 있다는 것입니다."
    }), "\n", _jsx(_components.p, {
      children: "아래는 class 에 선언된 예제입니다."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "#[Route(Http::POST, '/products/create'), Autowire,]\nclass ProductsCreateController\n{\n    public function __invoke() { /* … */ }\n}\n"
      })
    }), "\n", _jsxs(_components.p, {
      children: ["이를 염두에 두시고 ", _jsx(_components.strong, {
        children: "Reflection::getAttributes()"
      }), " 가 배열을 반환하는 이유가 명확하므로 결과를 필터링하는 방법을 살펴보겠습니다."]
    }), "\n", _jsx(_components.p, {
      children: "여기에서는 controller 의 route 를 parsing 하는것에 촛점을 맞추고\nRoute attribute 에 대해서만 관심을 가지도록 하겠습니다. 해당 클래스를 필터로 쉽게 전달 할 수 있습니다."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "$attributes = $reflectionClass->getAttributes(Route::class);\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "두번째 parameter는 필터링이 수행되는 방식을 변경합니다. 지정된 인터페이스를 구현하는 모든 속성을 반환하도록 하는  ReflectionAttribute::IS_INSTANCEOF 를 전달할 수 있습니다."
    }), "\n", _jsx(_components.p, {
      children: "예를 들어 여러 attribute 에 의존하는 컨테이너 정의를 구문을 parsing 한다고 가정한다면..."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "$attributes = $reflectionClass->getAttributes(\n    ContainerAttribute::class, \n    ReflectionAttribute::IS_INSTANCEOF\n);\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "좀 더 풀어서 쉽게 설명드리자면... class 아래의 모든 하위 method, property, constants 의 attribute 를 가져올때 선언하면 됩니다."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "$r_atts = $rc->getAttributes(SomeAttribute::class, 0); // 0 is default, just given class\necho json_encode(array_map(fn(ReflectionAttribute $r_att) => $r_att->getName(), $r_atts)), PHP_EOL;\n\n$r_atts = $rc->getAttributes(SomeAttribute::class, 2); // given class and children classes\necho json_encode(array_map(fn(ReflectionAttribute $r_att) => $r_att->getName(), $r_atts)), PHP_EOL;\n"
      })
    }), "\n", _jsx(_components.h2, {
      children: "Real World"
    }), "\n", _jsx(_components.p, {
      children: "그렇다면 실제 활용할 수 있는 예제는 무엇일까요?"
    }), "\n", _jsxs(_components.p, {
      children: ["laravel 을 예를 들면, php7 까지의 laravel 에서 route 를 등록하기 위해 route 에 대한 설정값이 존재하였습니다. ", _jsx(_components.a, {
        href: "https://laravel.kr/docs/8.x/routing",
        children: "라우팅"
      })]
    }), "\n", _jsx(_components.p, {
      children: "routes 라는 디렉토리의 web.php / api.php 에 연결할 컨트롤러를 등록하는 형식이었죠.\n아래와 같이요."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "Route::get('user/profile', [UserProfileController::class, 'show'])->name('profile');\n"
      })
    }), "\n", _jsxs(_components.p, {
      children: ["하지만 php attributes 에 대한 도입으로 이런 설정 파일을 따로 작성할 필요가 없어졌습니다. ", _jsx(_components.a, {
        href: "https://github.com/spatie/laravel-route-attributes",
        children: "laravel-route-attributes"
      })]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-php",
        children: "use Spatie\\RouteAttributes\\Attributes\\Get;\n\nclass UserProfileController\n{\n    #[Get('user/profile')]\n    public function show()\n    {\n\n    }\n}\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "설정 파일을 통하지 않고, 컨트롤러에 attribute 작성하는 것 만으로도 충분하게 되었죠."
    }), "\n", _jsx(_components.p, {
      children: "이상입니다."
    }), "\n", _jsx(_components.p, {
      children: "Ref."
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsx(_components.li, {
        children: _jsx(_components.a, {
          href: "https://stitcher.io/blog/attributes-in-php-8",
          children: "PHP 8: Attributes"
        })
      }), "\n", _jsx(_components.li, {
        children: _jsx(_components.a, {
          href: "https://github.com/spatie/laravel-route-attributes",
          children: "laravel-route-attributes"
        })
      }), "\n", _jsx(_components.li, {
        children: _jsx(_components.a, {
          href: "https://pronist.tistory.com/60",
          children: "PHP: PHP 8 기능 정리 및 요약 - 개발자 정상우"
        })
      }), "\n", _jsx(_components.li, {
        children: _jsx(_components.a, {
          href: "https://velog.io/@qroffle/PHP-%EC%86%8C%EC%8B%9D-Attribute",
          children: "PHP 소식 - Attribute"
        })
      }), "\n"]
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = {
    ..._provideComponents(),
    ...props.components
  };
  return MDXLayout ? _jsx(MDXLayout, {
    ...props,
    children: _jsx(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
return {
  default: MDXContent
};
5:[["$","$L12",null,{}],["$","$L13",null,{}],["$","$L14",null,{"title":"php8 에 도입되는 annotation (attributes)","summary":"php 8 부터는 attrubutes 라는 기능을 사용할 수 있습니다. 다른 많은 언어에서는 annontation 이라고 불리는 것이죠.","date":"3 years ago","category":"coding"}],["$","$L15",null,{"post":{"slug":"php8-attributes","title":"php8 에 도입되는 annotation (attributes)","date":"$D2021-12-01T01:00:00.000Z","summary":"php 8 부터는 attrubutes 라는 기능을 사용할 수 있습니다. 다른 많은 언어에서는 annontation 이라고 불리는 것이죠.","category":"coding","image":"https://raw.githubusercontent.com/security-checklist/php-security-check-list/master//image/php-image.png","embeddedImagesLocal":"$undefined","tags":["dev","coding","php","annotation"],"content":"$16","source":{"compiledSource":"$17","frontmatter":{},"scope":{}},"roadAddress":"$undefined","parcelAddress":"$undefined","lat":"$undefined","lng":"$undefined","viewCount":28}}],["$","$L18",null,{"maxWidth":"lg","sx":{"mx":"auto","width":"100%","p":2},"children":[["$","$L19",null,{"sx":{"my":3}}],["$","$L18",null,{"sx":{"mb":3},"children":["$","$L18",null,{"sx":{"mt":1,"display":"flex","flexWrap":"wrap","gap":1},"children":[["$","$L1a","0",{"href":"/tag/dev","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"dev","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","1",{"href":"/tag/coding","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"coding","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","2",{"href":"/tag/php","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"php","sx":{"textTransform":"lowercase"}}]}],["$","$L1a","3",{"href":"/tag/annotation","passHref":true,"style":{"textDecoration":"none"},"children":["$","$L1b",null,{"label":"annotation","sx":{"textTransform":"lowercase"}}]}]]}]}],["$","$L18",null,{"sx":{"display":"flex","justifyContent":"space-between","alignItems":"center","flexWrap":"wrap","gap":1},"children":[["$","$L1c",null,{"component":"$1d","href":"/article/svn-to-git","variant":"outlined","color":"primary","sx":{"textAlign":"left"},"children":["← ","svn 사용자를 위한 git 안내서"]}],["$","$L1c",null,{"component":"$1d","href":"/article/what-we-expect-from-software-developers-on-each-level","variant":"outlined","color":"primary","sx":{"ml":"auto","textAlign":"right"},"children":["각 레벨의 개발자에 기대하는 것들"," →"]}]]}]]}],["$","$L18",null,{"py":2,"mt":4,"component":"footer","children":["$","$L1e",null,{"maxWidth":"lg","sx":{"display":"flex","flexDirection":{"xs":"column","md":"row"},"justifyContent":{"xs":"center","md":"space-between"},"alignItems":"center","gap":2},"children":[["$","$L1f",null,{"variant":"body2","children":["© ","2022-2025"," ","Yeppyshiba Blog",". All rights reserved."]}],["$","$L1f",null,{"variant":"body2","children":["$","$L1d",null,{"href":"https://www.flaticon.com/free-icons/akita-inu","target":"_blank","rel":"noopener noreferrer","title":"akita inu icons","underline":"hover","color":"primary","children":"Akita inu icons created by tulpahn - Flaticon"}]}]]}]}]]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"php8 에 도입되는 annotation (attributes) - Yeppyshiba Blog"}],["$","meta","2",{"name":"description","content":"php 8 부터는 attrubutes 라는 기능을 사용할 수 있습니다. 다른 많은 언어에서는 annontation 이라고 불리는 것이죠."}],["$","meta","3",{"name":"keywords","content":"dev, coding, php, annotation"}],["$","link","4",{"rel":"canonical","href":"/article/php8-attributes"}],["$","meta","5",{"property":"og:title","content":"php8 에 도입되는 annotation (attributes)"}],["$","meta","6",{"property":"og:description","content":"php 8 부터는 attrubutes 라는 기능을 사용할 수 있습니다. 다른 많은 언어에서는 annontation 이라고 불리는 것이죠."}],["$","meta","7",{"property":"og:url","content":"https://blog.yeppyshiba.com/article/php8-attributes"}],["$","meta","8",{"property":"og:image","content":"https://raw.githubusercontent.com/security-checklist/php-security-check-list/master//image/php-image.png"}],["$","meta","9",{"property":"og:type","content":"website"}],["$","meta","10",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","11",{"name":"twitter:title","content":"php8 에 도입되는 annotation (attributes)"}],["$","meta","12",{"name":"twitter:description","content":"php 8 부터는 attrubutes 라는 기능을 사용할 수 있습니다. 다른 많은 언어에서는 annontation 이라고 불리는 것이죠."}],["$","meta","13",{"name":"twitter:image","content":"https://raw.githubusercontent.com/security-checklist/php-security-check-list/master//image/php-image.png"}]]
7:null
